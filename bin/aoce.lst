    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\AoCE\ti84pce.inc"
Listing for file "aoce.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\AoCE\defines.asm"
    1 00:0000 -  -  -  -  MAP_SIZE                    .equ 128
    2 00:0000 -  -  -  -  OFFSET_X                    .equ 0
    3 00:0000 -  -  -  -  OFFSET_Y                    .equ 1
    4 00:0000 -  -  -  -  OFFSET_X_TILE0              .equ 0
    5 00:0000 -  -  -  -  OFFSET_Y_TILE0              .equ 3
    6 00:0000 -  -  -  -  
    7 00:0000 -  -  -  -  currDrawingBuffer           .equ 0E30014h
    8 00:0000 -  -  -  -  screenBuffer                .equ vRAM+(320*240)
    9 00:0000 -  -  -  -  mapAddress                  .equ pixelShadow
   10 00:0000 -  -  -  -  blackBuffer                 .equ 0E40000h
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  need_to_redraw_tiles        .equ 0
   13 00:0000 -  -  -  -  
   14 00:0000 -  -  -  -  kpUp                        .equ 3
   15 00:0000 -  -  -  -  kpLeft                      .equ 1
   16 00:0000 -  -  -  -  kpRight                     .equ 2
   17 00:0000 -  -  -  -  kpDown                      .equ 0
   18 00:0000 -  -  -  -  kpClear                     .equ 6
   19 00:0000 -  -  -  -  kpEnter                     .equ 0
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  ; Only 2 walkable tiles
   22 00:0000 -  -  -  -  TILE_EMPTY                  .equ 0
   23 00:0000 -  -  -  -  TILE_GRASS                  .equ 1
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ; These are not walkable tiles
   26 00:0000 -  -  -  -  TILE_FOOD                   .equ 2
   27 00:0000 -  -  -  -  TILE_GOLD                   .equ 3
   28 00:0000 -  -  -  -  TILE_STONE                  .equ 4
   29 00:0000 -  -  -  -  TILE_TREE                   .equ 5
Listing for file "aoce.asm"
    3 00:0000 -  -  -  -  #include "macros.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"
    1 00:0000 -  -  -  -  #macro shift_tile0_x_left()
    2 00:0000             	ld de, (iy+OFFSET_X_TILE0)
    3 00:0000             	dec de
    4 00:0000             	ld (iy+OFFSET_X_TILE0), de
    5 00:0000             #endmacro
    6 00:0000 -  -  -  -  
    7 00:0000 -  -  -  -  #macro shift_tile0_x_right()
    8 00:0000             	ld de, (iy+OFFSET_X_TILE0)
    9 00:0000             	inc de
   10 00:0000             	ld (iy+OFFSET_X_TILE0), de
   11 00:0000             #endmacro
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro shift_tile0_y_up()
   14 00:0000             	ld de, (iy+OFFSET_Y_TILE0)
   15 00:0000             	dec de
   16 00:0000             	ld (iy+OFFSET_Y_TILE0), de
   17 00:0000             #endmacro
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro shift_tile0_y_down()
   20 00:0000             	ld de, (iy+OFFSET_Y_TILE0)
   21 00:0000             	inc de
   22 00:0000             	ld (iy+OFFSET_Y_TILE0), de
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  #macro printString(message, x, y)
   26 00:0000             	ld l, y
   27 00:0000             	push hl
   28 00:0000             		ld hl, x
   29 00:0000             		push hl
   30 00:0000             			ld hl, message
   31 00:0000             			push hl
   32 00:0000             				call gfx_PrintStringXY
   33 00:0000             			pop hl
   34 00:0000             		pop hl
   35 00:0000             	pop hl
   36 00:0000             #endmacro
   37 00:0000 -  -  -  -  
   38 00:0000 -  -  -  -  #macro dispCompressedImage(pointer, x, y)
   39 00:0000             #IF x==y
   40 00:0000             	ld hl, x
   41 00:0000             	push hl
   42 00:0000             		push hl
   43 00:0000             #ELSE
   44 00:0000             	ld l, y
   45 00:0000             	push hl
   46 00:0000             		ld hl, x
   47 00:0000             		push hl
   48 00:0000             #ENDIF
   49 00:0000             			ld de, plotSScreen
   50 00:0000             			push de
   51 00:0000             				ld hl, pointer \.r1
   52 00:0000             				call DecompressSprite
   53 00:0000             				call gfx_Sprite_NoClip
   54 00:0000             			pop de
   55 00:0000             		pop hl
   56 00:0000             	pop hl
   57 00:0000             #endmacro
Listing for file "aoce.asm"
    4 00:0000 -  -  -  -  #include "bin/AOCEGFX1.lab"
Listing for file "C:\programming\Assembly\AoCE\bin\AOCEGFX1.lab"
    1 00:0000 -  -  -  -  _AOCEI_COMPRESSED = $0000 
    2 00:0000 -  -  -  -  _AOCEI_COMPRESSED_SIZE = $1AE9 
    3 00:0000 -  -  -  -  _AOCEI_HEIGHT = $0055 
    4 00:0000 -  -  -  -  _AOCEI_WIDTH = $00D4 
    5 00:0000 -  -  -  -  _INTRO_COMPRESSED = $5D96 
    6 00:0000 -  -  -  -  _INTRO_COMPRESSED_SIZE = $2670 
    7 00:0000 -  -  -  -  _INTRO_HEIGHT = $00AF 
    8 00:0000 -  -  -  -  _INTRO_WIDTH = $00AF 
    9 00:0000 -  -  -  -  _NEWLOADGAME_COMPRESSED = $5088 
   10 00:0000 -  -  -  -  _NEWLOADGAME_COMPRESSED_SIZE = $0D0E 
   11 00:0000 -  -  -  -  _NEWLOADGAME_HEIGHT = $007E 
   12 00:0000 -  -  -  -  _NEWLOADGAME_WIDTH = $0079 
   13 00:0000 -  -  -  -  _PLAYHELPQUIT_COMPRESSED = $364B 
   14 00:0000 -  -  -  -  _PLAYHELPQUIT_COMPRESSED_SIZE = $0AAA 
   15 00:0000 -  -  -  -  _PLAYHELPQUIT_HEIGHT = $0075 
   16 00:0000 -  -  -  -  _PLAYHELPQUIT_WIDTH = $004E 
   17 00:0000 -  -  -  -  _POINTER = $8406 
   18 00:0000 -  -  -  -  _POINTER_HEIGHT = $0023 
   19 00:0000 -  -  -  -  _POINTER_WIDTH = $0017 
   20 00:0000 -  -  -  -  _SINGLEMULTIPLAYER_COMPRESSED = $40F5 
   21 00:0000 -  -  -  -  _SINGLEMULTIPLAYER_COMPRESSED_SIZE = $0F93 
   22 00:0000 -  -  -  -  _SINGLEMULTIPLAYER_HEIGHT = $007E 
   23 00:0000 -  -  -  -  _SINGLEMULTIPLAYER_WIDTH = $0089 
   24 00:0000 -  -  -  -  _SOLDIER_COMPRESSED = $1AE9 
   25 00:0000 -  -  -  -  _SOLDIER_COMPRESSED_SIZE = $1B62 
   26 00:0000 -  -  -  -  _SOLDIER_HEIGHT = $00DE 
   27 00:0000 -  -  -  -  _SOLDIER_WIDTH = $0069 
Listing for file "aoce.asm"
    5 00:0000 -  -  -  -  #include "bin/AOCEGFX2.lab"
Listing for file "C:\programming\Assembly\AoCE\bin\AOCEGFX2.lab"
    1 00:0000 -  -  -  -  _TEST1 = $0000 
    2 00:0000 -  -  -  -  _TEST1_HEIGHT = $001D 
    3 00:0000 -  -  -  -  _TEST1_WIDTH = $0020 
    4 00:0000 -  -  -  -  _TEST2 = $03A2 
    5 00:0000 -  -  -  -  _TEST2_HEIGHT = $0020 
    6 00:0000 -  -  -  -  _TEST2_WIDTH = $0020 
    7 00:0000 -  -  -  -  _TILE1 = $07A4 
    8 00:0000 -  -  -  -  _TILE1_HEIGHT = $0011 
    9 00:0000 -  -  -  -  _TILE1_WIDTH = $0020 
Listing for file "aoce.asm"
    6 00:0000 -  -  -  -  #include "relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
    1 00:0000 -  -  -  -  #macro relocate1()
    2 00:0000             	#ifdef old_addr
    3 00:0000             		.echo >> relocation_table1.asm "\t.dl ",$ - new_addr + old_addr - 3,"\n"
    4 00:0000             	#else
    5 00:0000             		.echo >> relocation_table1.asm "\t.dl ",$-3,"\n"
    6 00:0000             	#endif
    7 00:0000             #endmacro
    8 00:0000 -  -  -  -  #define .r1 relocate1()
    9 00:0000 -  -  -  -  
   10 00:0000 -  -  -  -  #macro relocate2()
   11 00:0000             	#ifdef old_addr
   12 00:0000             		.echo >> relocation_table2.asm "\t.dl ",$ - new_addr + old_addr - 3,"\n"
   13 00:0000             	#else
   14 00:0000             		.echo >> relocation_table2.asm "\t.dl ",$ - 3,"\n"
   15 00:0000             	#endif
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  #define .r2 relocate2()
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro relocate(addr)
   20 00:0000             	#define old_addr eval($)
   21 00:0000             	.org addr
   22 00:0000             	#define new_addr eval($)
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  #macro endrelocate()
   26 00:0000             	.org $-new_addr+old_addr
   27 00:0000             	#undefine old_addr
   28 00:0000             	#undefine new_addr
   29 00:0000             #endmacro
   30 00:0000 -  -  -  -  
   31 00:0000 -  -  -  -  .echo >> relocation_table1.asm "RelocationTable1:\n"
   32 00:0000 -  -  -  -  .echo >> relocation_table2.asm "RelocationTable2:\n"
Listing for file "aoce.asm"
    7 00:0000 -  -  -  -  
    8 00:0000 EF 7B -  -  .db tExtTok, tAsm84CECmp
    9 00:0002 -  -  -  -  .org UserMem
   10 D1:A881 -  -  -  -  
   11 D1:A881 -  -  -  -  start:
   12 D1:A881 C3 B3 A9 D1     jp AoCEStart
   13 D1:A885 01 -  -  -      .db 1
   14 D1:A886 10 10 -  -      .db 16,16
   15 D1:A888 00 00 00 00 
              20 61 81 A1 
              A1 A0 A0 40 
              01 00 00 00     .db 000h,000h,000h,000h,020h,061h,081h,0A1h,0A1h,0A0h,0A0h,040h,001h,000h,000h,000h
   16 D1:A898 00 00 00 20 
              61 A2 C2 C1 
              C0 A0 C0 61 
              21 21 21 00     .db 000h,000h,000h,020h,061h,0A2h,0C2h,0C1h,0C0h,0A0h,0C0h,061h,021h,021h,021h,000h
   17 D1:A8A8 00 00 20 61 
              A1 C1 A1 A0 
              61 A1 C1 62 
              29 29 21 21     .db 000h,000h,020h,061h,0A1h,0C1h,0A1h,0A0h,061h,0A1h,0C1h,062h,029h,029h,021h,021h
   18 D1:A8B8 00 00 61 A1 
              A1 A0 61 81 
              61 61 82 8C 
              4A 4A 29 21     .db 000h,000h,061h,0A1h,0A1h,0A0h,061h,081h,061h,061h,082h,08Ch,04Ah,04Ah,029h,021h
   19 D1:A8C8 00 20 60 C1 
              A0 60 40 69 
              6A 6A 8B 94 
              94 4A 49 21     .db 000h,020h,060h,0C1h,0A0h,060h,040h,069h,06Ah,06Ah,08Bh,094h,094h,04Ah,049h,021h
   20 D1:A8D8 00 20 A0 C2 
              81 40 21 6B 
              6B 94 D6 B5 
              B5 6B 49 21     .db 000h,020h,0A0h,0C2h,081h,040h,021h,06Bh,06Bh,094h,0D6h,0B5h,0B5h,06Bh,049h,021h
   21 D1:A8E8 00 20 81 C1 
              81 40 4A 4B 
              4B 94 DE DE 
              94 6B 4A 21     .db 000h,020h,081h,0C1h,081h,040h,04Ah,04Bh,04Bh,094h,0DEh,0DEh,094h,06Bh,04Ah,021h
   22 D1:A8F8 00 20 60 A1 
              81 20 4B 4A 
              4A 6B B6 DE 
              B5 6B 4A 21     .db 000h,020h,060h,0A1h,081h,020h,04Bh,04Ah,04Ah,06Bh,0B6h,0DEh,0B5h,06Bh,04Ah,021h
   23 D1:A908 00 20 40 60 
              60 41 6B 2A 
              2A 4B B4 B5 
              B5 B5 6C 29     .db 000h,020h,040h,060h,060h,041h,06Bh,02Ah,02Ah,04Bh,0B4h,0B5h,0B5h,0B5h,06Ch,029h
   24 D1:A918 00 20 60 A0 
              80 41 94 6B 
              4A 29 49 6C 
              94 6B 4A 6B     .db 000h,020h,060h,0A0h,080h,041h,094h,06Bh,04Ah,029h,049h,06Ch,094h,06Bh,04Ah,06Bh
   25 D1:A928 00 FF FF FF 
              A0 40 4A 4A 
              4B 6B 29 21 
              01 00 29 6B     .db 000h,0FFh,0FFh,0FFh,0A0h,040h,04Ah,04Ah,04Bh,06Bh,029h,021h,001h,000h,029h,06Bh
   26 D1:A938 20 80 FF C0 
              A0 40 21 4A 
              4A 6B 6B 8C 
              6B 6C 8C 29     .db 020h,080h,0FFh,0C0h,0A0h,040h,021h,04Ah,04Ah,06Bh,06Bh,08Ch,06Bh,06Ch,08Ch,029h
   27 D1:A948 40 A0 FF A0 
              80 20 00 4A 
              4A 4B 4A 6B 
              6B 8C 6B 00     .db 040h,0A0h,0FFh,0A0h,080h,020h,000h,04Ah,04Ah,04Bh,04Ah,06Bh,06Bh,08Ch,06Bh,000h
   28 D1:A958 61 A1 FF 60 
              40 00 00 21 
              4A 4A 6B 8C 
              8C B4 6B 00     .db 061h,0A1h,0FFh,060h,040h,000h,000h,021h,04Ah,04Ah,06Bh,08Ch,08Ch,0B4h,06Bh,000h
   29 D1:A968 81 FF FF FF 
              20 00 00 21 
              4A 4A 4B 94 
              B5 D6 6B 00     .db 081h,0FFh,0FFh,0FFh,020h,000h,000h,021h,04Ah,04Ah,04Bh,094h,0B5h,0D6h,06Bh,000h
   30 D1:A978 81 81 40 40 
              00 00 00 00 
              21 29 4A 4A 
              4A 6B 29 00     .db 081h,081h,040h,040h,000h,000h,000h,000h,021h,029h,04Ah,04Ah,04Ah,06Bh,029h,000h
   31 D1:A988 41 67 65 20 
              6F 66 20 43 
              45 6D 70 69 
              72 65 73 20 
              49 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -      .db "Age of CEmpires I - By Peter \"PT_\" Tillema", 0
   32 D1:A9B3 -  -  -  -  AoCEStart:
   33 D1:A9B3 21 40 AE D1     ld hl, LibLoadAppVar
   34 D1:A9B7 CD 20 03 02     call _Mov9ToOP1
   35 D1:A9BB 3E 15 -  -      ld a, AppVarObj
   36 D1:A9BD 32 F8 05 D0     ld (OP1), a
   37 D1:A9C1 CD 0C 05 02 _:  call _ChkFindSym
   38 D1:A9C5 38 24 -  -      jr c, NotFound
   39 D1:A9C7 CD 98 1F 02     call _ChkInRAM
   40 D1:A9CB 20 0E -  -      jr nz, InArc
   41 D1:A9CD CD 28 06 02     call _PushOP1
   42 D1:A9D1 CD 48 14 02     call _Arc_UnArc
   43 D1:A9D5 CD C4 05 02     call _PopOP1
   44 D1:A9D9 18 E6 -  -      jr -_
   45 D1:A9DB -  -  -  -  InArc:
   46 D1:A9DB EB -  -  -      ex de, hl
   47 D1:A9DC 11 09 00 00     ld de, 9
   48 D1:A9E0 19 -  -  -      add hl, de
   49 D1:A9E1 5E -  -  -      ld e, (hl)
   50 D1:A9E2 19 -  -  -      add hl, de
   51 D1:A9E3 23 -  -  -      inc hl
   52 D1:A9E4 23 -  -  -      inc hl
   53 D1:A9E5 23 -  -  -      inc hl
   54 D1:A9E6 11 03 AA D1     ld de, RelocationStart
   55 D1:A9EA E9 -  -  -      jp (hl)
   56 D1:A9EB -  -  -  -  NotFound:
   57 D1:A9EB CD 14 08 02     call _ClrScrn
   58 D1:A9EF CD 28 08 02     call _HomeUp
   59 D1:A9F3 21 3C AE D1     ld hl, MissingAppVar
   60 D1:A9F7 CD C0 07 02     call _PutS
   61 D1:A9FB CD F0 07 02     call _NewLine
   62 D1:A9FF C3 C0 07 02     jp _PutS
   63 D1:AA03 -  -  -  -  RelocationStart:
   64 D1:AA03 C0 47 52 41 
              50 48 58 00 
              04 -  -  -      .db 0C0h, "GRAPHX", 0, 4
   65 D1:AA0C -  -  -  -  gfx_Begin:
   66 D1:AA0C C3 00 00 00     jp 0
   67 D1:AA10 -  -  -  -  gfx_End:
   68 D1:AA10 C3 03 00 00     jp 3
   69 D1:AA14 -  -  -  -  gfx_SetDraw:
   70 D1:AA14 C3 1B 00 00     jp 27
   71 D1:AA18 -  -  -  -  gfx_SwapDraw:
   72 D1:AA18 C3 1E 00 00     jp 30
   73 D1:AA1C -  -  -  -  gfx_PrintChar:
   74 D1:AA1C C3 2A 00 00     jp 42
   75 D1:AA20 -  -  -  -  gfx_PrintUInt:
   76 D1:AA20 C3 30 00 00     jp 48
   77 D1:AA24 -  -  -  -  gfx_PrintStringXY:
   78 D1:AA24 C3 36 00 00     jp 54
   79 D1:AA28 -  -  -  -  gfx_SetTextXY:
   80 D1:AA28 C3 39 00 00     jp 57
   81 D1:AA2C -  -  -  -  gfx_SetTextFGColor:
   82 D1:AA2C C3 3F 00 00     jp 63
   83 D1:AA30 -  -  -  -  gfx_FillRectangle_NoClip:
   84 D1:AA30 C3 7E 00 00     jp 126
   85 D1:AA34 -  -  -  -  gfx_TransparentSprite:
   86 D1:AA34 C3 AE 00 00     jp 174
   87 D1:AA38 -  -  -  -  gfx_Sprite_NoClip:
   88 D1:AA38 C3 B1 00 00     jp 177
   89 D1:AA3C -  -  -  -  gfx_SetTransparentColor:
   90 D1:AA3C C3 E1 00 00     jp 225
   91 D1:AA40 -  -  -  -      
   92 D1:AA40 -  -  -  -  Main:
   93 D1:AA40 CD 28 08 02     call _HomeUp
   94 D1:AA44 CD 08 08 02     call _ClrLCDFull
   95 D1:AA48 CD 48 08 02     call _RunIndicOff
   96 D1:AA4C ED 73 5E AA 
              D1 -  -  -      ld (backupSP), sp
   97 D1:AA51 C3 F5 AA D1     jp RunProgram
   98 D1:AA55 -  -  -  -  ForceStopProgramWithFadeOut:
   99 D1:AA55 CD 9B B1 D1     call fadeOut
  100 D1:AA59 -  -  -  -  ForceStopProgram:
  101 D1:AA59 CD 10 AA D1     call gfx_End
  102 D1:AA5D -  -  -  -  backupSP = $+1
  103 D1:AA5D 31 00 00 00     ld sp, 0
  104 D1:AA61 3E D1 -  -      ld a, 0D1h
  105 D1:AA63 ED 6D -  -      ld mb, a
  106 D1:AA65 49 CD 8F AA     call.lis fLockFlash & 0FFFFh
  107 D1:AA69 3E D0 -  -      ld a, 0D0h
  108 D1:AA6B ED 6D -  -      ld mb, a
  109 D1:AA6D FD 21 80 00 
              D0 -  -  -      ld iy, flags
  110 D1:AA72 CD 3C 1A 02     call _DrawStatusBar
  111 D1:AA76 3E 09 -  -      ld a, kClear
  112 D1:AA78 C3 64 01 02     jp _JForceCmd
  113 D1:AA7C -  -  -  -  #include "flash.asm"
Listing for file "C:\programming\Assembly\AoCE\flash.asm"
    1 D1:AA7C -  -  -  -  .assume ADL=0
    2 D1:AA7C -  -  -  -  fUnlockFlash:
    3 D1:AA7C 3E 8C -  -      ld a, 08Ch
    4 D1:AA7E ED 39 24 -      out0 (024h), a
    5 D1:AA81 0E 04 -  -      ld c, 4
    6 D1:AA83 ED 38 06 -      in0 a, (6)
    7 D1:AA86 B1 -  -  -      or c
    8 D1:AA87 ED 39 06 -      out0 (6), a
    9 D1:AA8A ED 09 28 -      out0 (028h), c
   10 D1:AA8D 49 C9 -  -      ret.l
   11 D1:AA8F -  -  -  -  fLockFlash:
   12 D1:AA8F AF -  -  -      xor    a, a
   13 D1:AA90 ED 39 28 -      out0 (028h), a
   14 D1:AA93 ED 38 06 -      in0 a, (6)
   15 D1:AA96 CB 97 -  -      res 2, a
   16 D1:AA98 ED 39 06 -      out0 (6), a
   17 D1:AA9B 3E 88 -  -      ld a, 088h
   18 D1:AA9D ED 39 24 -      out0(024h), a
   19 D1:AAA0 49 C9 -  -      ret.l
   20 D1:AAA2 -  -  -  -  .assume ADL=1
   21 D1:AAA2 -  -  -  -      
   22 D1:AAA2 -  -  -  -  fCopyRAMToFlash:
   23 D1:AAA2 3E 3C -  -      ld a, 03Ch
   24 D1:AAA4 CD EC AA D1     call fMemorySafeErase
   25 D1:AAA8 3E 3D -  -      ld a, 03Dh
   26 D1:AAAA CD EC AA D1     call fMemorySafeErase
   27 D1:AAAE 3E 3E -  -      ld a, 03Eh
   28 D1:AAB0 CD EC AA D1     call fMemorySafeErase
   29 D1:AAB4 3E 3F -  -      ld a, 03Fh
   30 D1:AAB6 CD EC AA D1     call fMemorySafeErase
   31 D1:AABA 21 01 00 D0     ld hl, 0D00001h
   32 D1:AABE 36 A5 -  -      ld (hl), 0A5h
   33 D1:AAC0 2B -  -  -      dec hl
   34 D1:AAC1 36 5A -  -      ld (hl), 05Ah
   35 D1:AAC3 11 00 00 3C     ld de, 03C0000h
   36 D1:AAC7 01 00 00 04     ld bc, 040000h
   37 D1:AACB C3 E0 02 00     jp _WriteFlash
   38 D1:AACF -  -  -  -      
   39 D1:AACF -  -  -  -  fRestoreFlashToRAM:
   40 D1:AACF -  -  -  -  ; restore RAM state
   41 D1:AACF 21 00 00 3C     ld hl, $3C0000
   42 D1:AAD3 11 00 00 D0     ld de, ramStart + 0000000h
   43 D1:AAD7 01 7C 88 01     ld bc, $01887C
   44 D1:AADB ED B0 -  -      ldir
   45 D1:AADD 21 00 00 3E     ld hl, $3E0000
   46 D1:AAE1 11 00 00 D2     ld de, ramStart+020000h
   47 D1:AAE5 01 00 00 02     ld bc, $020000
   48 D1:AAE9 ED B0 -  -      ldir
   49 D1:AAEB C9 -  -  -      ret
   50 D1:AAEC -  -  -  -  fMemorySafeErase:
   51 D1:AAEC 01 F8 00 00     ld bc,$0000F8
   52 D1:AAF0 C5 -  -  -      push bc
   53 D1:AAF1 C3 DC 02 00         jp _EraseFlashSector
Listing for file "aoce.asm"
  114 D1:AAF5 -  -  -  -  RunProgram:
  115 D1:AAF5 B7 -  -  -      or a, a
  116 D1:AAF6 ED 62 -  -      sbc hl, hl
  117 D1:AAF8 EB -  -  -      ex de, hl
  118 D1:AAF9 21 30 00 F2     ld hl, mpTmrCtrl
  119 D1:AAFD 36 02 -  -      ld (hl), %00000010
  120 D1:AAFF 23 -  -  -      inc hl
  121 D1:AB00 CB CE -  -      set 1, (hl)
  122 D1:AB02 CB D6 -  -      set 2, (hl)
  123 D1:AB04 2E 00 -  -      ld l, 0
  124 D1:AB06 ED 1F -  -      ld (hl), de
  125 D1:AB08 2C -  -  -      inc l
  126 D1:AB09 ED 1F -  -      ld (hl), de
  127 D1:AB0B 2E 10 -  -      ld l, 010h
  128 D1:AB0D ED 1F -  -      ld (hl), de
  129 D1:AB0F 23 -  -  -      inc hl
  130 D1:AB10 ED 1F -  -      ld (hl), de
  131 D1:AB12 2E 30 -  -      ld l, 030h
  132 D1:AB14 CB C6 -  -      set 0, (hl)
  133 D1:AB16 CB DE -  -      set 3, (hl)
  134 D1:AB18 06 02 -  -      ld b, 2
  135 D1:AB1A DD 21 F8 AE 
              D1 -  -  -      ld ix, GraphicsAppvar
  136 D1:AB1F -  -  -  -  LoadSpritesAppvar:
  137 D1:AB1F C5 -  -  -      push bc
  138 D1:AB20 DD 34 08 -          inc (ix+8)
  139 D1:AB23 ED 22 00 -          lea hl, ix
  140 D1:AB26 CD 20 03 02         call _Mov9ToOP1
  141 D1:AB2A CD 0C 05 02         call _ChkFindSym
  142 D1:AB2E 30 1B -  -          jr nc, +_
  143 D1:AB30 21 0B AF D1         ld hl, GraphicsAppvarNotFound
  144 D1:AB34 CD C0 07 02         call _PutS
  145 D1:AB38 CD F0 07 02         call _NewLine
  146 D1:AB3C ED 22 01 -          lea hl, ix+1
  147 D1:AB3F CD C0 07 02         call _PutS
  148 D1:AB43 CD 8C 0D 02         call _GetKey
  149 D1:AB47 C3 59 AA D1         jp ForceStopProgram
  150 D1:AB4B CD 98 1F 02 _:      call _ChkInRAM
  151 D1:AB4F DC 48 14 02         call c, _Arc_Unarc
  152 D1:AB53 13 -  -  -          inc de
  153 D1:AB54 13 -  -  -          inc de
  154 D1:AB55 ED 53 74 AB 
              D1 -  -  -          ld (GraphicsAppvarStart), de
  155 D1:AB5A C1 -  -  -      pop bc
  156 D1:AB5B 50 -  -  -      ld d, b
  157 D1:AB5C 1E 03 -  -      ld e, 3
  158 D1:AB5E 15 -  -  -      dec d
  159 D1:AB5F ED 5C -  -      mlt de
  160 D1:AB61 21 29 AF D1     ld hl, RelocationTables
  161 D1:AB65 19 -  -  -      add hl, de
  162 D1:AB66 ED 27 -  -      ld hl, (hl)
  163 D1:AB68 -  -  -  -  ChangeRelocationTableLoop:
  164 D1:AB68 E5 -  -  -      push hl
  165 D1:AB69 ED 27 -  -          ld hl, (hl)
  166 D1:AB6B 7C -  -  -          ld a, h
  167 D1:AB6C A5 -  -  -          and a, l
  168 D1:AB6D 3C -  -  -          inc a
  169 D1:AB6E 28 12 -  -          jr z, +_
  170 D1:AB70 E5 -  -  -          push hl
  171 D1:AB71 ED 27 -  -              ld hl, (hl)
  172 D1:AB73 -  -  -  -  GraphicsAppvarStart = $+1
  173 D1:AB73 11 00 00 00             ld de, 0
  174 D1:AB77 19 -  -  -              add hl, de
  175 D1:AB78 EB -  -  -              ex de, hl
  176 D1:AB79 E1 -  -  -          pop hl
  177 D1:AB7A ED 1F -  -          ld (hl), de
  178 D1:AB7C E1 -  -  -      pop hl
  179 D1:AB7D 23 -  -  -      inc hl
  180 D1:AB7E 23 -  -  -      inc hl
  181 D1:AB7F 23 -  -  -      inc hl
  182 D1:AB80 18 E6 -  -      jr ChangeRelocationTableLoop
  183 D1:AB82 E1 -  -  -  _:  pop hl
  184 D1:AB83 10 9A -  -      djnz LoadSpritesAppvar
  185 D1:AB85 21 02 AF D1     ld hl, AoCEMapAppvar
  186 D1:AB89 CD 20 03 02     call _Mov9ToOP1
  187 D1:AB8D CD 0C 05 02     call _ChkFindSym
  188 D1:AB91 D4 34 14 02     call nc, _DelVarArc
  189 D1:AB95 2E 27 -  -      ld l, lcdBpp8
  190 D1:AB97 E5 -  -  -      push hl
  191 D1:AB98 CD 0C AA D1         call gfx_Begin
  192 D1:AB9C 11 00 02 E3         ld de, mpLcdPalette
  193 D1:ABA0 21 00 00 E4         ld hl, blackBuffer
  194 D1:ABA4 01 00 02 00         ld bc, 256*2
  195 D1:ABA8 -  -  -  -          ;ldir
  196 D1:ABA8 2E FE -  -          ld l, 254
  197 D1:ABAA E3 -  -  -          ex (sp), hl
  198 D1:ABAB CD 2C AA D1         call gfx_SetTextFGColor
  199 D1:ABAF 2E FF -  -          ld l, 255
  200 D1:ABB1 E3 -  -  -          ex (sp), hl
  201 D1:ABB2 CD 3C AA D1         call gfx_SetTransparentColor
  202 D1:ABB6 E1 -  -  -      pop hl
  203 D1:ABB7 CD C1 B2 D1     call MainMenu
  204 D1:ABBB CD AF AC D1     call GenerateMap
  205 D1:ABBF DD 21 27 3C 
              D1 -  -  -      ld ix, saveSScreen+21000
  206 D1:ABC4 F3 -  -  -      di
  207 D1:ABC5 40 31 7E 98     ld.sis sp, 0987Eh
  208 D1:ABC9 3E D1 -  -      ld a, 0D1h
  209 D1:ABCB ED 6D -  -      ld mb, a
  210 D1:ABCD 49 CD 7C AA     call.lis fUnlockFlash & 0FFFFh
  211 D1:ABD1 AF -  -  -      xor a, a
  212 D1:ABD2 DD 77 00 -      ld (ix+OFFSET_X), a
  213 D1:ABD5 DD 77 01 -      ld (ix+OFFSET_Y), a
  214 D1:ABD8 FD 21 4D AF 
              D1 -  -  -      ld iy, AoCEFlags
  215 D1:ABDD FD CB 00 C6     set need_to_redraw_tiles, (iy+0)
  216 D1:ABE1 21 24 B5 D1     ld hl, drawfield_loc
  217 D1:ABE5 11 10 00 E1     ld de, DrawField
  218 D1:ABE9 01 34 00 00     ld bc, DrawFieldEnd - DrawField
  219 D1:ABED ED B0 -  -      ldir
  220 D1:ABEF 11 00 08 E3     ld de, DrawTiles
  221 D1:ABF3 01 75 01 00     ld bc, DrawTilesEnd - DrawTiles
  222 D1:ABF7 ED B0 -  -      ldir
  223 D1:ABF9 -  -  -  -      
  224 D1:ABF9 -  -  -  -  MainGameLoop:
  225 D1:ABF9 21 00 2C D5     ld hl, 0D52C00h
  226 D1:ABFD 22 10 00 E3     ld (mpLcdBase), hl
  227 D1:AC01 CD 10 00 E1     call DrawField
  228 D1:AC05 CD F9 B4 D1     call GetKeyFast
  229 D1:AC09 FD 21 4E AF 
              D1 -  -  -      ld iy, TopLeftXTile
  230 D1:AC0E 2E 1C -  -      ld l, 01Ch
  231 D1:AC10 CB 76 -  -      bit kpClear, (hl)
  232 D1:AC12 CA 59 AA D1     jp z, ForceStopProgram
  233 D1:AC16 2E 1E -  -      ld l, 01Eh
  234 D1:AC18 -  -  -  -  CheckIfPressedUp:             ; All the controls are 'reversed', if you press [LEFT], it should scroll to the right
  235 D1:AC18 CB 5E -  -      bit kpUp, (hl)
  236 D1:AC1A 28 1C -  -      jr z, CheckIfPressedRight
  237 D1:AC1C DD 7E 01 -      ld a, (ix+OFFSET_Y)
  238 D1:AC1F 3C -  -  -      inc a
  239 D1:AC20 3C -  -  -      inc a
  240 D1:AC21 3C -  -  -      inc a
  241 D1:AC22 3C -  -  -      inc a
  242 D1:AC23 E6 0F -  -      and %00001111
  243 D1:AC25 DD 77 01 -      ld (ix+OFFSET_Y), a
  244 D1:AC28 20 0E -  -      jr nz, CheckIfPressedRight
  245 D1:AC2A FD 17 00 1B 
              FD 1F 00 -      shift_tile0_x_left()
Listing for file "aoce.asm"
  246 D1:AC31 FD 17 03 1B 
              FD 1F 03 -      shift_tile0_y_up()
  247 D1:AC38 -  -  -  -  CheckIfPressedRight:
  248 D1:AC38 CB 56 -  -      bit kpRight, (hl)
  249 D1:AC3A 28 1D -  -      jr z, CheckIfPressedLeft
  250 D1:AC3C DD 7E 00 -      ld a, (ix+OFFSET_X)
  251 D1:AC3F B7 -  -  -      or a, a
  252 D1:AC40 20 0E -  -      jr nz, +_
  253 D1:AC42 FD 17 00 13 
              FD 1F 00 -      shift_tile0_x_right()
  254 D1:AC49 FD 17 03 1B 
              FD 1F 03 -      shift_tile0_y_up()
  255 D1:AC50 3D -  -  -  _:  dec a
  256 D1:AC51 3D -  -  -      dec a
  257 D1:AC52 3D -  -  -      dec a
  258 D1:AC53 3D -  -  -      dec a
  259 D1:AC54 E6 1F -  -      and %00011111
  260 D1:AC56 DD 77 00 -      ld (ix+OFFSET_X), a
  261 D1:AC59 -  -  -  -  CheckIfPressedLeft:
  262 D1:AC59 CB 4E -  -      bit kpLeft, (hl)
  263 D1:AC5B 28 1C -  -      jr z, CheckIfPressedDown
  264 D1:AC5D DD 7E 00 -      ld a, (ix+OFFSET_X)
  265 D1:AC60 3C -  -  -      inc a
  266 D1:AC61 3C -  -  -      inc a
  267 D1:AC62 3C -  -  -      inc a
  268 D1:AC63 3C -  -  -      inc a
  269 D1:AC64 E6 1F -  -      and %00011111
  270 D1:AC66 DD 77 00 -      ld (ix+OFFSET_X), a
  271 D1:AC69 20 0E -  -      jr nz, CheckIfPressedDown
  272 D1:AC6B FD 17 00 1B 
              FD 1F 00 -      shift_tile0_x_left()
  273 D1:AC72 FD 17 03 13 
              FD 1F 03 -      shift_tile0_y_down()
  274 D1:AC79 -  -  -  -  CheckIfPressedDown:
  275 D1:AC79 CB 46 -  -      bit kpDown, (hl)
  276 D1:AC7B 28 1D -  -      jr z, CheckKeyPressesStop
  277 D1:AC7D DD 7E 01 -      ld a, (ix+OFFSET_Y)
  278 D1:AC80 B7 -  -  -      or a, a
  279 D1:AC81 20 0E -  -      jr nz, +_
  280 D1:AC83 FD 17 00 13 
              FD 1F 00 -      shift_tile0_x_right()
  281 D1:AC8A FD 17 03 13 
              FD 1F 03 -      shift_tile0_y_down()
  282 D1:AC91 3D -  -  -  _: dec a
  283 D1:AC92 3D -  -  -      dec a
  284 D1:AC93 3D -  -  -      dec a
  285 D1:AC94 3D -  -  -      dec a
  286 D1:AC95 E6 0F -  -      and %00001111
  287 D1:AC97 DD 77 01 -      ld (ix+OFFSET_Y), a
  288 D1:AC9A -  -  -  -  CheckKeyPressesStop:
  289 D1:AC9A FD 21 4D AF 
              D1 -  -  -      ld iy, AoCEFlags
  290 D1:AC9F FD CB 00 86     res need_to_redraw_tiles, (iy+0)
  291 D1:ACA3 7E -  -  -      ld a, (hl)
  292 D1:ACA4 B7 -  -  -      or a, a
  293 D1:ACA5 28 04 -  -      jr z, +_
  294 D1:ACA7 FD CB 00 C6     set need_to_redraw_tiles, (iy+0)
  295 D1:ACAB C3 F9 AB D1 _:  jp MainGameLoop
  296 D1:ACAF -  -  -  -      
  297 D1:ACAF -  -  -  -  #include "map.asm"
Listing for file "C:\programming\Assembly\AoCE\map.asm"
    1 D1:ACAF -  -  -  -  GenerateMap:
    2 D1:ACAF CD 77 B4 D1     call EraseArea
    3 D1:ACB3 21 00 2C D5     ld hl, screenBuffer
    4 D1:ACB7 36 01 -  -      ld (hl), 1
    5 D1:ACB9 11 01 2C D5     ld de, screenBuffer+1
    6 D1:ACBD 01 FF 2B 01     ld bc, 320*240-1
    7 D1:ACC1 ED B0 -  -      ldir
    8 D1:ACC3 2E 70 E5 21 
              05 00 00 E5 
              21 D7 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(GeneratingMapMessage, 5, 112)
Listing for file "C:\programming\Assembly\AoCE\map.asm"
    9 D1:ACD7 2A 00 00 F2     ld hl, (mpTmr1Counter)
   10 D1:ACDB 22 36 AE D1     ld (seed_1), hl
   11 D1:ACDF 2A 10 00 F2     ld hl, (mpTmr2Counter)
   12 D1:ACE3 22 39 AE D1     ld (seed_2), hl
   13 D1:ACE7 06 00 -  -      ld b, 0
   14 D1:ACE9 -  -  -  -  PlaceTreesLoop:
   15 D1:ACE9 DD 60 -  -      ld ixh, b
   16 D1:ACEB CD 15 AE D1     call prng24
   17 D1:ACEF 01 80 00 00     ld bc, MAP_SIZE
   18 D1:ACF3 CD 44 01 00     call __idvrmu
   19 D1:ACF7 E5 -  -  -      push hl
   20 D1:ACF8 CD 15 AE D1         call prng24
   21 D1:ACFC 01 80 00 00         ld bc, MAP_SIZE
   22 D1:AD00 CD 44 01 00         call __idvrmu
   23 D1:AD04 26 A0 -  -          ld h, 160
   24 D1:AD06 ED 6C -  -          mlt hl
   25 D1:AD08 29 -  -  -          add hl, hl
   26 D1:AD09 D1 -  -  -      pop de
   27 D1:AD0A 19 -  -  -      add hl, de
   28 D1:AD0B 11 00 2C D5     ld de, screenBuffer
   29 D1:AD0F 19 -  -  -      add hl, de
   30 D1:AD10 36 05 -  -      ld (hl), TILE_TREE
   31 D1:AD12 DD 44 -  -      ld b, ixh
   32 D1:AD14 10 D3 -  -      djnz PlaceTreesLoop
   33 D1:AD16 06 03 -  -      ld b, 3                                                                ; Food, stone, gold
   34 D1:AD18 -  -  -  -  PlaceAllResourceTypesLoop:
   35 D1:AD18 DD 60 -  -      ld ixh, b
   36 D1:AD1A 06 0F -  -      ld b, 15                                                            ; Place 15 resources of each
   37 D1:AD1C -  -  -  -  PlaceResourceTypeLoop:
   38 D1:AD1C DD 68 -  -      ld ixl, b
   39 D1:AD1E CD 15 AE D1     call prng24
   40 D1:AD22 01 07 00 00     ld bc, 7
   41 D1:AD26 CD 44 01 00     call __idvrmu
   42 D1:AD2A E5 -  -  -      push hl
   43 D1:AD2B D1 -  -  -      pop de
   44 D1:AD2C 29 -  -  -      add hl, hl
   45 D1:AD2D 29 -  -  -      add hl, hl
   46 D1:AD2E 29 -  -  -      add hl, hl
   47 D1:AD2F 19 -  -  -      add hl, de
   48 D1:AD30 11 54 AF D1     ld de, ResourcesType1
   49 D1:AD34 19 -  -  -      add hl, de
   50 D1:AD35 E5 -  -  -      push hl
   51 D1:AD36 CD 15 AE D1         call prng24
   52 D1:AD3A 01 58 00 00         ld bc, MAP_SIZE-20-20
   53 D1:AD3E CD 44 01 00         call __idvrmu
   54 D1:AD42 7D -  -  -          ld a, l
   55 D1:AD43 C6 14 -  -          add a, 20
   56 D1:AD45 6F -  -  -          ld l, a
   57 D1:AD46 26 A0 -  -          ld h, 160
   58 D1:AD48 ED 6C -  -          mlt hl
   59 D1:AD4A 29 -  -  -          add hl, hl
   60 D1:AD4B E5 -  -  -          push hl
   61 D1:AD4C CD 15 AE D1             call prng24
   62 D1:AD50 01 58 00 00             ld bc, MAP_SIZE-20-20
   63 D1:AD54 CD 44 01 00             call __idvrmu
   64 D1:AD58 7D -  -  -              ld a, l
   65 D1:AD59 C6 14 -  -              add a, 20
   66 D1:AD5B 6F -  -  -              ld l, a
   67 D1:AD5C D1 -  -  -          pop de
   68 D1:AD5D 19 -  -  -          add hl, de
   69 D1:AD5E 11 00 2C D5         ld de, screenBuffer
   70 D1:AD62 19 -  -  -          add hl, de
   71 D1:AD63 E5 -  -  -          push hl
   72 D1:AD64 FD E1 -  -          pop iy
   73 D1:AD66 11 3E 01 00         ld de, 320-2
   74 D1:AD6A 7E -  -  -          ld a, (hl)                                                        ; Check if one of the 9 blocks is already a tree/part of resource
   75 D1:AD6B 23 -  -  -          inc hl
   76 D1:AD6C B6 -  -  -          or a, (hl)
   77 D1:AD6D 23 -  -  -          inc hl
   78 D1:AD6E B6 -  -  -          or a, (hl)
   79 D1:AD6F 19 -  -  -          add hl, de
   80 D1:AD70 B6 -  -  -          or a, (hl)
   81 D1:AD71 23 -  -  -          inc hl
   82 D1:AD72 B6 -  -  -          or a, (hl)
   83 D1:AD73 23 -  -  -          inc hl
   84 D1:AD74 B6 -  -  -          or a, (hl)
   85 D1:AD75 19 -  -  -          add hl, de
   86 D1:AD76 B6 -  -  -          or a, (hl)
   87 D1:AD77 23 -  -  -          inc hl
   88 D1:AD78 B6 -  -  -          or a, (hl)
   89 D1:AD79 23 -  -  -          inc hl
   90 D1:AD7A B6 -  -  -          or a, (hl)
   91 D1:AD7B D1 -  -  -      pop de
   92 D1:AD7C 20 1C -  -      jr nz, DontDrawResource
   93 D1:AD7E ED 23 00 -      lea hl, iy
   94 D1:AD81 ED 4C -  -      mlt bc
   95 D1:AD83 06 03 -  -      ld b, 3
   96 D1:AD85 -  -  -  -  PlaceResource:
   97 D1:AD85 48 -  -  -      ld c, b
   98 D1:AD86 06 03 -  -      ld b, 3
   99 D1:AD88 -  -  -  -  PlaceResourceRowLoop:
  100 D1:AD88 1A -  -  -      ld a, (de)
  101 D1:AD89 B7 -  -  -      or a, a
  102 D1:AD8A 28 02 -  -      jr z, +_
  103 D1:AD8C -  -  -  -  ResourceType = $+1
  104 D1:AD8C 36 02 -  -      ld (hl), TILE_FOOD
  105 D1:AD8E 23 -  -  -  _:  inc hl
  106 D1:AD8F 13 -  -  -      inc de
  107 D1:AD90 10 F6 -  -      djnz PlaceResourceRowLoop
  108 D1:AD92 79 -  -  -      ld a, c
  109 D1:AD93 04 -  -  -      inc b
  110 D1:AD94 0E 3D -  -      ld c, 320-256-3
  111 D1:AD96 09 -  -  -      add hl, bc
  112 D1:AD97 47 -  -  -      ld b, a
  113 D1:AD98 10 EB -  -      djnz PlaceResource
  114 D1:AD9A -  -  -  -  DontDrawResource:
  115 D1:AD9A DD 45 -  -      ld b, ixl
  116 D1:AD9C 05 -  -  -      dec b
  117 D1:AD9D C2 1C AD D1     jp nz, PlaceResourceTypeLoop
  118 D1:ADA1 21 8D AD D1     ld hl, ResourceType
  119 D1:ADA5 34 -  -  -      inc (hl)
  120 D1:ADA6 DD 44 -  -      ld b, ixh
  121 D1:ADA8 05 -  -  -      dec b
  122 D1:ADA9 C2 18 AD D1     jp nz, PlaceAllResourceTypesLoop
  123 D1:ADAD -  -  -  -  ; All the resources are now placed, so copy them to the map appvar
  124 D1:ADAD 21 00 80 00     ld hl, MAP_SIZE*MAP_SIZE*2
  125 D1:ADB1 CD 1C 05 02     call _EnoughMem
  126 D1:ADB5 DA 59 AA D1     jp c, ForceStopProgram
  127 D1:ADB9 EB -  -  -      ex de, hl
  128 D1:ADBA CD 30 13 02     call _CreateAppvar
  129 D1:ADBE 21 00 2C D5     ld hl, screenBuffer
  130 D1:ADC2 13 -  -  -      inc de
  131 D1:ADC3 13 -  -  -      inc de
  132 D1:ADC4 DD 26 80 -      ld ixh, MAP_SIZE
  133 D1:ADC7 -  -  -  -  CopyMapToNewAppvarLoop:
  134 D1:ADC7 06 80 -  -      ld b, MAP_SIZE
  135 D1:ADC9 -  -  -  -  CopyRowLoop:
  136 D1:ADC9 7E -  -  -      ld a, (hl)
  137 D1:ADCA 12 -  -  -      ld (de), a
  138 D1:ADCB 13 -  -  -      inc de
  139 D1:ADCC 3D -  -  -      dec a
  140 D1:ADCD 28 02 -  -      jr z, +_
  141 D1:ADCF 3E C8 -  -      ld a, 200
  142 D1:ADD1 12 -  -  -  _:  ld (de), a
  143 D1:ADD2 23 -  -  -      inc hl
  144 D1:ADD3 13 -  -  -      inc de
  145 D1:ADD4 10 F3 -  -      djnz CopyRowLoop
  146 D1:ADD6 01 C0 00 00     ld bc, 320-MAP_SIZE
  147 D1:ADDA 09 -  -  -      add hl, bc
  148 D1:ADDB DD 25 -  -      dec ixh
  149 D1:ADDD 20 E8 -  -      jr nz, CopyMapToNewAppvarLoop
  150 D1:ADDF CD C8 02 02     call _OP4ToOP1
  151 D1:ADE3 -  -  -  -  LoadMap:
  152 D1:ADE3 CD 77 B4 D1     call EraseArea
  153 D1:ADE7 2E 70 E5 21 
              05 00 00 E5 
              21 E9 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(LoadingMapMessage, 5, 112)
  154 D1:ADFB CD 0C 05 02     call _ChkFindSym
  155 D1:ADFF CD 98 1F 02     call _ChkInRAM
  156 D1:AE03 DC 48 14 02     call c, _Arc_Unarc
  157 D1:AE07 21 F6 31 D0     ld hl, mapAddress
  158 D1:AE0B EB -  -  -      ex de, hl
  159 D1:AE0C 23 -  -  -      inc hl
  160 D1:AE0D 23 -  -  -      inc hl
  161 D1:AE0E 01 00 80 00     ld bc, MAP_SIZE*MAP_SIZE*2
  162 D1:AE12 ED B0 -  -      ldir
  163 D1:AE14 C9 -  -  -      ret
  164 D1:AE15 -  -  -  -          
  165 D1:AE15 -  -  -  -  prng24:
  166 D1:AE15 ED 5B 36 AE 
              D1 -  -  -      ld de, (seed_1)
  167 D1:AE1A B7 -  -  -      or a, a
  168 D1:AE1B ED 62 -  -      sbc hl, hl
  169 D1:AE1D 19 -  -  -      add hl, de
  170 D1:AE1E 29 -  -  -      add hl, hl
  171 D1:AE1F 29 -  -  -      add hl, hl
  172 D1:AE20 2C -  -  -      inc l
  173 D1:AE21 19 -  -  -      add hl, de
  174 D1:AE22 22 36 AE D1     ld (seed_1), hl
  175 D1:AE26 2A 39 AE D1     ld hl, (seed_2)
  176 D1:AE2A 29 -  -  -      add hl, hl
  177 D1:AE2B 9F -  -  -      sbc a, a
  178 D1:AE2C E6 1B -  -      and %00011011
  179 D1:AE2E AD -  -  -      xor a, l
  180 D1:AE2F 6F -  -  -      ld l, a
  181 D1:AE30 22 39 AE D1     ld (seed_2), hl
  182 D1:AE34 19 -  -  -      add hl, de
  183 D1:AE35 C9 -  -  -      ret
  184 D1:AE36 -  -  -  -      
  185 D1:AE36 -  -  -  -  seed_1:
  186 D1:AE36 00 00 00 -      .dl 0
  187 D1:AE39 -  -  -  -  seed_2:
  188 D1:AE39 00 00 00 -      .dl 0
Listing for file "aoce.asm"
  298 D1:AE3C -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\AoCE\data.asm"
    1 D1:AE3C -  -  -  -  MissingAppVar:
    2 D1:AE3C 4E 65 65 64     .db "Need"
    3 D1:AE40 -  -  -  -  LibLoadAppVar:
    4 D1:AE40 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -      .db " LibLoad", 0
    5 D1:AE49 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -      .db "tiny.cc/clibs", 0
    6 D1:AE57 -  -  -  -  GetHelp1:
    7 D1:AE57 43 68 65 63 
              6B 20 68 74 
              74 70 3A 2F 
              2F 74 69 6E 
              79 2E 63 63 
              2F 61 6F 63 
              65 00 -  -      .db "Check http://tiny.cc/aoce", 0
    8 D1:AE71 -  -  -  -  GetHelp2:
    9 D1:AE71 66 6F 72 20 
              68 65 6C 70 
              2C 20 63 6F 
              6E 74 72 6F 
              6C 73 2C 20 
              41 49 27 73 
              00 -  -  -      .db "for help, controls, AI's", 0
   10 D1:AE8A -  -  -  -  GetHelp3:
   11 D1:AE8A 61 6E 64 20 
              6D 75 63 68 
              20 6D 6F 72 
              65 21 00 -      .db "and much more!", 0
   12 D1:AE99 -  -  -  -  MadeByMessage:
   13 D1:AE99 4D 61 64 65 
              20 62 79 20 
              50 65 74 65 
              72 20 22 50 
              54 5F 22 20 
              54 69 6C 6C 
              65 6D 61 00     .db "Made by Peter \"PT_\" Tillema", 0
   14 D1:AEB5 -  -  -  -  NoMultiplayer1:
   15 D1:AEB5 4D 75 6C 74 
              69 70 6C 61 
              79 65 72 20 
              69 73 20 6E 
              6F 74 00 -      .db "Multiplayer is not", 0
   16 D1:AEC8 -  -  -  -  NoMultiplayer2:
   17 D1:AEC8 73 75 70 70 
              6F 72 74 65 
              64 20 79 65 
              74 21 00 -      .db "supported yet!", 0
   18 D1:AED7 -  -  -  -  GeneratingMapMessage:
   19 D1:AED7 47 65 6E 65 
              72 61 74 69 
              6E 67 20 6D 
              61 70 2E 2E 
              2E 00 -  -      .db "Generating map...", 0
   20 D1:AEE9 -  -  -  -  LoadingMapMessage:
   21 D1:AEE9 4C 6F 61 64 
              69 6E 67 20 
              6D 61 70 2E 
              2E 2E 00 -      .db "Loading map...", 0
   22 D1:AEF8 -  -  -  -  GraphicsAppvar:
   23 D1:AEF8 15 41 4F 43 
              45 47 46 58 
              30 00 -  -      .db AppVarObj, "AOCEGFX0", 0
   24 D1:AF02 -  -  -  -  AoCEMapAppvar:
   25 D1:AF02 15 41 4F 43 
              45 4D 41 50 
              00 -  -  -      .db AppVarObj, "AOCEMAP", 0
   26 D1:AF0B -  -  -  -  GraphicsAppvarNotFound:
   27 D1:AF0B 43 61 6E 27 
              74 20 66 69 
              6E 64 20 61 
              70 70 76 61 
              72 3A 00 -      .db "Can't find appvar:", 0
   28 D1:AF1E -  -  -  -  LoadingMessage:
   29 D1:AF1E 4C 6F 61 64 
              69 6E 67 2E 
              2E 2E 00 -      .db "Loading...", 0
   30 D1:AF29 -  -  -  -      
   31 D1:AF29 -  -  -  -  RelocationTables:
   32 D1:AF29 46 B7 D1 2F 
              B7 D1 -  -      .dl RelocationTable2, RelocationTable1
   33 D1:AF2F -  -  -  -      
   34 D1:AF2F -  -  -  -  AmountOfWood:
   35 D1:AF2F 00 00 00 -      .dl 0
   36 D1:AF32 -  -  -  -  AmountOfFood:
   37 D1:AF32 00 00 00 -      .dl 0
   38 D1:AF35 -  -  -  -  AmountOfGold:
   39 D1:AF35 00 00 00 -      .dl 0
   40 D1:AF38 -  -  -  -  AmountOfStone:
   41 D1:AF38 00 00 00 -      .dl 0
   42 D1:AF3B -  -  -  -  AmountOfPeople:
   43 D1:AF3B 02 -  -  -      .db 2
   44 D1:AF3C -  -  -  -  AmountOfMaxPeople:
   45 D1:AF3C 0A -  -  -      .db 10
   46 D1:AF3D -  -  -  -  AmountOfBuildings:
   47 D1:AF3D 00 -  -  -      .db 0
   48 D1:AF3E -  -  -  -  
   49 D1:AF3E -  -  -  -  TilePointers:
   50 D1:AF3E A4 07 00 -      .dl _tile1 \.r2
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\data.asm"
   51 D1:AF41 00 00 00 -      .dl 0
   52 D1:AF44 00 00 00 -      .dl 0
   53 D1:AF47 00 00 00 -      .dl 0
   54 D1:AF4A 00 00 00 -      .dl 0
   55 D1:AF4D -  -  -  -      
   56 D1:AF4D -  -  -  -  AoCEFlags:
   57 D1:AF4D 00 -  -  -      .db 0
   58 D1:AF4E -  -  -  -      
   59 D1:AF4E -  -  -  -  TopLeftXTile:
   60 D1:AF4E F6 FF FF -      .dl -10
   61 D1:AF51 -  -  -  -  TopLeftYTile:
   62 D1:AF51 FD FF FF -      .dl -3
   63 D1:AF54 -  -  -  -      
   64 D1:AF54 -  -  -  -  ResourcesType1:
   65 D1:AF54 00 01 00 -      .db 0, 1, 0
   66 D1:AF57 00 01 01 -      .db 0, 1, 1
   67 D1:AF5A 01 01 01 -      .db 1, 1, 1
   68 D1:AF5D -  -  -  -  ResourcesType2:
   69 D1:AF5D 01 00 00 -      .db 1, 0, 0
   70 D1:AF60 00 01 00 -      .db 0, 1, 0
   71 D1:AF63 00 01 01 -      .db 0, 1, 1
   72 D1:AF66 -  -  -  -  ResourcesType3:
   73 D1:AF66 00 00 00 -      .db 0, 0, 0
   74 D1:AF69 01 01 00 -      .db 1, 1, 0
   75 D1:AF6C 00 00 00 -      .db 0, 0, 0
   76 D1:AF6F -  -  -  -  ResourcesType4:
   77 D1:AF6F 01 01 01 -      .db 1, 1, 1
   78 D1:AF72 00 01 00 -      .db 0, 1, 0
   79 D1:AF75 00 00 00 -      .db 0, 0, 0
   80 D1:AF78 -  -  -  -  ResourcesType5:
   81 D1:AF78 00 00 00 -      .db 0, 0, 0
   82 D1:AF7B 00 00 01 -      .db 0, 0, 1
   83 D1:AF7E 01 01 01 -      .db 1, 1, 1
   84 D1:AF81 -  -  -  -  ResourcesType6:
   85 D1:AF81 00 00 00 -      .db 0, 0, 0
   86 D1:AF84 00 01 00 -      .db 0, 1, 0
   87 D1:AF87 00 00 00 -      .db 0, 0, 0
   88 D1:AF8A -  -  -  -  ResourcesType7:
   89 D1:AF8A 00 00 00 -      .db 0, 0, 0
   90 D1:AF8D 00 00 01 -      .db 0, 0, 1
   91 D1:AF90 00 01 01 -      .db 0, 1, 1
   92 D1:AF93 -  -  -  -      
   93 D1:AF93 -  -  -  -  pal_sprites:                                                                ; Don't worry, it's just the xLIBC palette
   94 D1:AF93 00 00 81 00 
              02 01 83 01 
              04 02 85 02 
              06 03 87 03     .dw $0000, $0081, $0102, $0183, $0204, $0285, $0306, $0387
   95 D1:AFA3 08 04 89 04 
              0A 05 8B 05 
              0C 06 8D 06 
              0E 07 8F 07     .dw $0408, $0489, $050A, $058B, $060C, $068D, $070E, $078F
   96 D1:AFB3 10 08 91 08 
              12 09 93 09 
              14 0A 95 0A 
              16 0B 97 0B     .dw $0810, $0891, $0912, $0993, $0A14, $0A95, $0B16, $0B97
   97 D1:AFC3 18 0C 99 0C 
              1A 0D 9B 0D 
              1C 0E 9D 0E 
              1E 0F 9F 0F     .dw $0C18, $0C99, $0D1A, $0D9B, $0E1C, $0E9D, $0F1E, $0F9F
   98 D1:AFD3 00 10 81 10 
              02 11 83 11 
              04 12 85 12 
              06 13 87 13     .dw $1000, $1081, $1102, $1183, $1204, $1285, $1306, $1387
   99 D1:AFE3 08 14 89 14 
              0A 15 8B 15 
              0C 16 8D 16 
              0E 17 8F 17     .dw $1408, $1489, $150A, $158B, $160C, $168D, $170E, $178F
  100 D1:AFF3 10 18 91 18 
              12 19 93 19 
              14 1A 95 1A 
              16 1B 97 1B     .dw $1810, $1891, $1912, $1993, $1A14, $1A95, $1B16, $1B97
  101 D1:B003 18 1C 99 1C 
              1A 1D 9B 1D 
              1C 1E 9D 1E 
              1E 1F 9F 1F     .dw $1C18, $1C99, $1D1A, $1D9B, $1E1C, $1E9D, $1F1E, $1F9F
  102 D1:B013 20 20 A1 20 
              22 21 A3 21 
              24 22 A5 22 
              26 23 A7 23     .dw $2020, $20A1, $2122, $21A3, $2224, $22A5, $2326, $23A7
  103 D1:B023 28 24 A9 24 
              2A 25 AB 25 
              2C 26 AD 26 
              2E 27 AF 27     .dw $2428, $24A9, $252A, $25AB, $262C, $26AD, $272E, $27AF
  104 D1:B033 30 28 B1 28 
              32 29 B3 29 
              34 2A B5 2A 
              36 2B B7 2B     .dw $2830, $28B1, $2932, $29B3, $2A34, $2AB5, $2B36, $2BB7
  105 D1:B043 38 2C B9 2C 
              3A 2D BB 2D 
              3C 2E BD 2E 
              3E 2F BF 2F     .dw $2C38, $2CB9, $2D3A, $2DBB, $2E3C, $2EBD, $2F3E, $2FBF
  106 D1:B053 20 30 A1 30 
              22 31 A3 31 
              24 32 A5 32 
              26 33 A7 33     .dw $3020, $30A1, $3122, $31A3, $3224, $32A5, $3326, $33A7
  107 D1:B063 28 34 A9 34 
              2A 35 AB 35 
              2C 36 AD 36 
              2E 37 AF 37     .dw $3428, $34A9, $352A, $35AB, $362C, $36AD, $372E, $37AF
  108 D1:B073 30 38 B1 38 
              32 39 B3 39 
              34 3A B5 3A 
              36 3B B7 3B     .dw $3830, $38B1, $3932, $39B3, $3A34, $3AB5, $3B36, $3BB7
  109 D1:B083 38 3C B9 3C 
              3A 3D BB 3D 
              3C 3E BD 3E 
              3E 3F BF 3F     .dw $3C38, $3CB9, $3D3A, $3DBB, $3E3C, $3EBD, $3F3E, $3FBF
  110 D1:B093 40 40 C1 40 
              42 41 C3 41 
              44 42 C5 42 
              46 43 C7 43     .dw $4040, $40C1, $4142, $41C3, $4244, $42C5, $4346, $43C7
  111 D1:B0A3 48 44 C9 44 
              4A 45 CB 45 
              4C 46 CD 46 
              4E 47 CF 47     .dw $4448, $44C9, $454A, $45CB, $464C, $46CD, $474E, $47CF
  112 D1:B0B3 50 48 D1 48 
              52 49 D3 49 
              54 4A D5 4A 
              56 4B D7 4B     .dw $4850, $48D1, $4952, $49D3, $4A54, $4AD5, $4B56, $4BD7
  113 D1:B0C3 58 4C D9 4C 
              5A 4D DB 4D 
              5C 4E DD 4E 
              5E 4F DF 4F     .dw $4C58, $4CD9, $4D5A, $4DDB, $4E5C, $4EDD, $4F5E, $4FDF
  114 D1:B0D3 40 50 C1 50 
              42 51 C3 51 
              44 52 C5 52 
              46 53 C7 53     .dw $5040, $50C1, $5142, $51C3, $5244, $52C5, $5346, $53C7
  115 D1:B0E3 48 54 C9 54 
              4A 55 CB 55 
              4C 56 CD 56 
              4E 57 CF 57     .dw $5448, $54C9, $554A, $55CB, $564C, $56CD, $574E, $57CF
  116 D1:B0F3 50 58 D1 58 
              52 59 D3 59 
              54 5A D5 5A 
              56 5B D7 5B     .dw $5850, $58D1, $5952, $59D3, $5A54, $5AD5, $5B56, $5BD7
  117 D1:B103 58 5C D9 5C 
              5A 5D DB 5D 
              5C 5E DD 5E 
              5E 5F DF 5F     .dw $5C58, $5CD9, $5D5A, $5DDB, $5E5C, $5EDD, $5F5E, $5FDF
  118 D1:B113 60 60 E1 60 
              62 61 E3 61 
              64 62 E5 62 
              66 63 E7 63     .dw $6060, $60E1, $6162, $61E3, $6264, $62E5, $6366, $63E7
  119 D1:B123 68 64 E9 64 
              6A 65 EB 65 
              6C 66 ED 66 
              6E 67 EF 67     .dw $6468, $64E9, $656A, $65EB, $666C, $66ED, $676E, $67EF
  120 D1:B133 70 68 F1 68 
              72 69 F3 69 
              74 6A F5 6A 
              76 6B F7 6B     .dw $6870, $68F1, $6972, $69F3, $6A74, $6AF5, $6B76, $6BF7
  121 D1:B143 78 6C F9 6C 
              7A 6D FB 6D 
              7C 6E FD 6E 
              7E 6F FF 6F     .dw $6C78, $6CF9, $6D7A, $6DFB, $6E7C, $6EFD, $6F7E, $6FFF
  122 D1:B153 60 70 E1 70 
              62 71 E3 71 
              64 72 E5 72 
              66 73 E7 73     .dw $7060, $70E1, $7162, $71E3, $7264, $72E5, $7366, $73E7
  123 D1:B163 68 74 E9 74 
              6A 75 EB 75 
              6C 76 ED 76 
              6E 77 EF 77     .dw $7468, $74E9, $756A, $75EB, $766C, $76ED, $776E, $77EF
  124 D1:B173 70 78 F1 78 
              72 79 F3 79 
              74 7A F5 7A 
              76 7B F7 7B     .dw $7870, $78F1, $7972, $79F3, $7A74, $7AF5, $7B76, $7BF7
  125 D1:B183 78 7C F9 7C 
              7A 7D FB 7D 
              7C 7E FD 7E 
              7E 7F FF FF     .dw $7C78, $7CF9, $7D7A, $7DFB, $7E7C, $7EFD, $7F7E, $FFFF
Listing for file "aoce.asm"
  299 D1:B193 -  -  -  -  #include "fade.asm"
Listing for file "C:\programming\Assembly\AoCE\fade.asm"
    1 D1:B193 -  -  -  -  ;------------------------------------------------
    2 D1:B193 -  -  -  -  ; fadeIn - fade the screen in
    3 D1:B193 -  -  -  -  ;   input:  none
    4 D1:B193 -  -  -  -  ;   output: none
    5 D1:B193 -  -  -  -  ;------------------------------------------------
    6 D1:B193 -  -  -  -  fadeIn:
    7 D1:B193 21 99 B1 D1         ld      hl,fadeInSub
    8 D1:B197 18 0F -  -          jr      fadeLcd
    9 D1:B199 -  -  -  -  fadeInSub:
   10 D1:B199 0D -  -  -          dec     c
   11 D1:B19A C9 -  -  -          ret
   12 D1:B19B -  -  -  -  
   13 D1:B19B -  -  -  -  ;------------------------------------------------
   14 D1:B19B -  -  -  -  ; fadeOut - fade the screen out by slowing erasing the palette
   15 D1:B19B -  -  -  -  ;   input:  none
   16 D1:B19B -  -  -  -  ;   output: none
   17 D1:B19B -  -  -  -  ;------------------------------------------------
   18 D1:B19B -  -  -  -  fadeOut:
   19 D1:B19B 21 A1 B1 D1         ld      hl,fadeOutSub
   20 D1:B19F 18 07 -  -          jr      fadeLcd
   21 D1:B1A1 -  -  -  -  fadeOutSub:
   22 D1:B1A1 79 -  -  -          ld      a,c
   23 D1:B1A2 D6 20 -  -          sub     32
   24 D1:B1A4 ED 44 -  -          neg
   25 D1:B1A6 4F -  -  -          ld      c,a
   26 D1:B1A7 C9 -  -  -          ret
   27 D1:B1A8 -  -  -  -  
   28 D1:B1A8 -  -  -  -  ;------------------------------------------------
   29 D1:B1A8 -  -  -  -  ; fadeLcd - fade the screen out or in
   30 D1:B1A8 -  -  -  -  ;   input:  HL => routine to calculate RGB modifier
   31 D1:B1A8 -  -  -  -  ;   output: none
   32 D1:B1A8 -  -  -  -  ;------------------------------------------------
   33 D1:B1A8 -  -  -  -  fadeLcd:
   34 D1:B1A8 22 BC B1 D1         ld      (__flSubCalc),hl
   35 D1:B1AC 0E 20 -  -          ld      c,32
   36 D1:B1AE -  -  -  -  flOuter:
   37 D1:B1AE 06 00 -  -          ld      b,0                           ; B = number of colours in palette
   38 D1:B1B0 FD 21 00 02 
              E3 -  -  -          ld      iy,mpLcdPalette
   39 D1:B1B5 DD 21 93 AF 
              D1 -  -  -          ld      ix,pal_sprites                  ; IX => palette being used
   40 D1:B1BA -  -  -  -  flInner:
   41 D1:B1BA C5 -  -  -          push    bc
   42 D1:B1BB -  -  -  -  __flSubCalc             = $+1
   43 D1:B1BB CD 00 00 00         call    $000000
   44 D1:B1BF 21 00 00 00         ld      hl,0
   45 D1:B1C3 -  -  -  -          ; red
   46 D1:B1C3 DD 7E 01 -          ld      a,(ix+1)
   47 D1:B1C6 0F 0F -  -          rrca \ rrca
   48 D1:B1C8 E6 1F -  -          and     %00011111
   49 D1:B1CA 91 -  -  -          sub     c
   50 D1:B1CB 30 01 -  -          jr      nc,flSkipR
   51 D1:B1CD AF -  -  -          xor     a
   52 D1:B1CE -  -  -  -  flSkipR:
   53 D1:B1CE 07 07 -  -          rlca \ rlca
   54 D1:B1D0 6F -  -  -          ld      l,a
   55 D1:B1D1 -  -  -  -          ; green
   56 D1:B1D1 DD 5E 01 -          ld      e,(ix+1)
   57 D1:B1D4 DD 56 00 -          ld      d,(ix)
   58 D1:B1D7 CB 22 CB 13         sla d \ rl e
   59 D1:B1DB CB 22 CB 13         sla d \ rl e
   60 D1:B1DF CB 22 CB 13         sla d \ rl e
   61 D1:B1E3 7B -  -  -          ld      a,e
   62 D1:B1E4 E6 1F -  -          and     %00011111
   63 D1:B1E6 91 -  -  -          sub     c
   64 D1:B1E7 30 01 -  -          jr      nc,flSkipG
   65 D1:B1E9 AF -  -  -          xor     a
   66 D1:B1EA -  -  -  -  flSkipG:
   67 D1:B1EA 16 00 -  -          ld      d,0
   68 D1:B1EC 5F -  -  -          ld      e,a
   69 D1:B1ED CB 3B CB 1A         srl e \ rr d
   70 D1:B1F1 CB 3B CB 1A         srl e \ rr d
   71 D1:B1F5 CB 3B CB 1A         srl e \ rr d
   72 D1:B1F9 7D -  -  -          ld      a,l
   73 D1:B1FA B3 -  -  -          or      e
   74 D1:B1FB 6F -  -  -          ld      l,a
   75 D1:B1FC 7C -  -  -          ld      a,h
   76 D1:B1FD B2 -  -  -          or      d
   77 D1:B1FE 67 -  -  -          ld      h,a
   78 D1:B1FF -  -  -  -          ; blue
   79 D1:B1FF DD 7E 00 -          ld      a,(ix)
   80 D1:B202 E6 1F -  -          and     %00011111
   81 D1:B204 91 -  -  -          sub     c
   82 D1:B205 30 01 -  -          jr      nc,flSkipB
   83 D1:B207 AF -  -  -          xor     a
   84 D1:B208 -  -  -  -  flSkipB:
   85 D1:B208 B4 -  -  -          or      h
   86 D1:B209 67 -  -  -          ld      h,a
   87 D1:B20A FD 74 00 -          ld      (iy),h
   88 D1:B20D FD 75 01 -          ld      (iy+1),l
   89 D1:B210 DD 23 DD 23         inc ix \ inc ix
   90 D1:B214 FD 23 FD 23         inc iy \ inc iy
   91 D1:B218 C1 -  -  -          pop     bc
   92 D1:B219 10 9F -  -          djnz    flInner
   93 D1:B21B 06 04 -  -          ld b, 4
   94 D1:B21D -  -  -  -  Wait0Loop:
   95 D1:B21D 50 -  -  -          ld d, b
   96 D1:B21E 06 00 -  -          ld b, 0
   97 D1:B220 -  -  -  -  Wait1Loop:
   98 D1:B220 58 -  -  -          ld e, b
   99 D1:B221 06 00 -  -          ld b, 0
  100 D1:B223 -  -  -  -  Wait2Loop:
  101 D1:B223 10 FE -  -          djnz Wait2Loop
  102 D1:B225 43 -  -  -          ld b, e
  103 D1:B226 10 F8 -  -          djnz Wait1Loop
  104 D1:B228 42 -  -  -          ld b, d
  105 D1:B229 10 F2 -  -          djnz Wait0Loop
  106 D1:B22B 0D -  -  -          dec     c
  107 D1:B22C 20 80 -  -          jr      nz,flOuter
  108 D1:B22E C9 -  -  -          ret
Listing for file "aoce.asm"
  300 D1:B22F -  -  -  -  #include "drawGame.asm"
Listing for file "C:\programming\Assembly\AoCE\drawGame.asm"
    1 D1:B22F -  -  -  -  DrawGame:
    2 D1:B22F 21 04 00 00     ld hl, 4
    3 D1:B233 E5 -  -  -      push hl
    4 D1:B234 2E 11 -  -          ld l, 17
    5 D1:B236 E5 -  -  -          push hl
    6 D1:B237 CD 28 AA D1             call gfx_SetTextXY
    7 D1:B23B 2E 05 -  -              ld l, 5
    8 D1:B23D E5 -  -  -              push hl
    9 D1:B23E 2A 2F AF D1                 ld hl, (AmountOfWood)
   10 D1:B242 E5 -  -  -                  push hl
   11 D1:B243 CD 20 AA D1                     call gfx_PrintUInt
   12 D1:B247 E1 -  -  -                  pop hl
   13 D1:B248 E1 -  -  -              pop hl
   14 D1:B249 E1 -  -  -          pop hl
   15 D1:B24A 2E 4E -  -          ld l, 78
   16 D1:B24C E5 -  -  -          push hl
   17 D1:B24D CD 28 AA D1             call gfx_SetTextXY
   18 D1:B251 2E 05 -  -              ld l, 5
   19 D1:B253 E5 -  -  -              push hl
   20 D1:B254 2A 32 AF D1                 ld hl, (AmountOfFood)
   21 D1:B258 E5 -  -  -                  push hl
   22 D1:B259 CD 20 AA D1                     call gfx_PrintUInt
   23 D1:B25D E1 -  -  -                  pop hl
   24 D1:B25E E1 -  -  -              pop hl
   25 D1:B25F E1 -  -  -          pop hl
   26 D1:B260 2E 90 -  -          ld l, 144
   27 D1:B262 E5 -  -  -          push hl
   28 D1:B263 CD 28 AA D1             call gfx_SetTextXY
   29 D1:B267 2E 05 -  -              ld l, 5
   30 D1:B269 E5 -  -  -              push hl
   31 D1:B26A 2A 35 AF D1                 ld hl, (AmountOfGold)
   32 D1:B26E E5 -  -  -                  push hl
   33 D1:B26F CD 20 AA D1                     call gfx_PrintUInt
   34 D1:B273 E1 -  -  -                  pop hl
   35 D1:B274 E1 -  -  -              pop hl
   36 D1:B275 E1 -  -  -          pop hl
   37 D1:B276 2E C8 -  -          ld l, 200
   38 D1:B278 E5 -  -  -          push hl
   39 D1:B279 CD 28 AA D1             call gfx_SetTextXY
   40 D1:B27D 2E 05 -  -              ld l, 5
   41 D1:B27F E5 -  -  -              push hl
   42 D1:B280 2A 35 AF D1                 ld hl, (AmountOfGold)
   43 D1:B284 E5 -  -  -                  push hl
   44 D1:B285 CD 20 AA D1                     call gfx_PrintUInt
   45 D1:B289 E1 -  -  -                  pop hl
   46 D1:B28A E1 -  -  -              pop hl
   47 D1:B28B E1 -  -  -          pop hl
   48 D1:B28C 24 -  -  -          inc h
   49 D1:B28D 2E 05 -  -          ld l, 5
   50 D1:B28F E5 -  -  -          push hl
   51 D1:B290 CD 28 AA D1             call gfx_SetTextXY
   52 D1:B294 2E 03 -  -              ld l, 3
   53 D1:B296 E5 -  -  -              push hl
   54 D1:B297 3A 3B AF D1                 ld a, (AmountOfPeople)
   55 D1:B29B ED 62 -  -                  sbc hl, hl
   56 D1:B29D 6F -  -  -                  ld l, a
   57 D1:B29E E5 -  -  -                  push hl
   58 D1:B29F CD 20 AA D1                     call gfx_PrintUInt
   59 D1:B2A3 E1 -  -  -                  pop hl
   60 D1:B2A4 E1 -  -  -              pop hl
   61 D1:B2A5 2E 2F -  -              ld l, '/'
   62 D1:B2A7 E5 -  -  -              push hl
   63 D1:B2A8 CD 1C AA D1                 call gfx_PrintChar
   64 D1:B2AC E1 -  -  -              pop hl
   65 D1:B2AD 2E 03 -  -              ld l, 3
   66 D1:B2AF E5 -  -  -              push hl
   67 D1:B2B0 3A 3C AF D1                 ld a, (AmountOfMaxPeople)
   68 D1:B2B4 B7 -  -  -                  or a, a
   69 D1:B2B5 ED 62 -  -                  sbc hl, hl
   70 D1:B2B7 6F -  -  -                  ld l, a
   71 D1:B2B8 E5 -  -  -                  push hl
   72 D1:B2B9 CD 20 AA D1                     call gfx_PrintUInt
   73 D1:B2BD E1 -  -  -                  pop hl
   74 D1:B2BE E1 -  -  -              pop hl
   75 D1:B2BF E1 -  -  -          pop hl
   76 D1:B2C0 E1 -  -  -      pop hl
Listing for file "aoce.asm"
  301 D1:B2C1 -  -  -  -  #include "mainmenu.asm"
Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
    1 D1:B2C1 -  -  -  -  MainMenu:
    2 D1:B2C1 21 00 00 D4     ld hl, vRAM
    3 D1:B2C5 36 94 -  -      ld (hl), 094h
    4 D1:B2C7 11 01 00 D4     ld de, vRAM+1
    5 D1:B2CB 01 FF 2B 01     ld bc, 320*240-1
    6 D1:B2CF ED B0 -  -      ldir
    7 D1:B2D1 2E 20 E5 21 
              48 00 00 E5 
              11 66 94 D0 
              D5 21 96 5D 
              00 -  -  -      dispCompressedImage(_intro_compressed, 72, 32)
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"

              CD CD B6 D1 
              CD 38 AA D1 
              D1 E1 E1 Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
    8 D1:B2ED CD 93 B1 D1     call fadeIn
    9 D1:B2F1 3E C8 -  -      ld a, 200
   10 D1:B2F3 CD B8 03 00     call _DelayTenTimesAms
   11 D1:B2F7 CD 9B B1 D1     call fadeOut
   12 D1:B2FB 11 00 00 D4     ld de, vRAM
   13 D1:B2FF 21 00 00 E4     ld hl, blackBuffer
   14 D1:B303 01 00 58 02     ld bc, 320*240*2
   15 D1:B307 ED B0 -  -      ldir
   16 D1:B309 21 05 00 00 
              E5 E5 11 66 
              94 D0 D5 21 
              00 00 00 -      dispCompressedImage(_AoCEI_compressed, 5, 5)
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"

              CD CD B6 D1 
              CD 38 AA D1 
              D1 E1 E1 Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
   17 D1:B323 2E 05 E5 21 
              D7 00 00 E5 
              11 66 94 D0 
              D5 21 E9 1A 
              00 -  -  -      dispCompressedImage(_soldier_compressed, 215, 5)
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"

              CD CD B6 D1 
              CD 38 AA D1 
              D1 E1 E1 Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
   18 D1:B33F 2E 5E E5 21 
              12 00 00 E5 
              21 99 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(MadeByMessage, 18, 94)
   19 D1:B353 CD 93 B1 D1     call fadeIn
   20 D1:B357 -  -  -  -  SelectLoopDrawPlayHelpQuit:
   21 D1:B357 CD 77 B4 D1     call EraseArea
   22 D1:B35B 2E 6E E5 21 
              32 00 00 E5 
              11 66 94 D0 
              D5 21 4B 36 
              00 -  -  -      dispCompressedImage(_playhelpquit_compressed, 50, 110)
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"

              CD CD B6 D1 
              CD 38 AA D1 
              D1 E1 E1 Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
   23 D1:B377 21 BA B4 D1     ld hl, SelectMenuMax
   24 D1:B37B 36 02 -  -      ld (hl), 2
   25 D1:B37D CD 8E B4 D1     call SelectMenu
   26 D1:B381 38 06 -  -      jr c, +_
   27 D1:B383 0D -  -  -      dec c
   28 D1:B384 28 07 -  -      jr z, DisplayHelp
   29 D1:B386 0D -  -  -      dec c
   30 D1:B387 20 4C -  -      jr nz, SelectedPlay
   31 D1:B389 C3 55 AA D1 _:  jp ForceStopProgramWithFadeOut
   32 D1:B38D -  -  -  -      
   33 D1:B38D -  -  -  -  DisplayHelp:
   34 D1:B38D CD 77 B4 D1     call EraseArea
   35 D1:B391 2E 70 E5 21 
              05 00 00 E5 
              21 57 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(GetHelp1, 5, 112)
   36 D1:B3A5 2E 7A E5 21 
              05 00 00 E5 
              21 71 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(GetHelp2, 5, 122)
   37 D1:B3B9 2E 84 E5 21 
              05 00 00 E5 
              21 8A AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(GetHelp3, 5, 132)
   38 D1:B3CD CD 03 B5 D1     call GetKeyAnyFast
   39 D1:B3D1 C3 57 B3 D1     jp SelectLoopDrawPlayHelpQuit
   40 D1:B3D5 -  -  -  -  SelectedPlay:
   41 D1:B3D5 CD 77 B4 D1     call EraseArea
   42 D1:B3D9 2E 6E E5 21 
              32 00 00 E5 
              11 66 94 D0 
              D5 21 F5 40 
              00 -  -  -      dispCompressedImage(_singlemultiplayer_compressed, 50, 110)
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"

              CD CD B6 D1 
              CD 38 AA D1 
              D1 E1 E1 Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
   43 D1:B3F5 21 BA B4 D1     ld hl, SelectMenuMax
   44 D1:B3F9 36 01 -  -      ld (hl), 1
   45 D1:B3FB CD 8E B4 D1     call SelectMenu
   46 D1:B3FF DA 57 B3 D1     jp c, SelectLoopDrawPlayHelpQuit
   47 D1:B403 0D -  -  -      dec c
   48 D1:B404 20 32 -  -      jr nz, SelectedSinglePlayer
   49 D1:B406 CD 77 B4 D1     call EraseArea
   50 D1:B40A 2E 70 E5 21 
              05 00 00 E5 
              21 B5 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(NoMultiplayer1, 5, 112)
   51 D1:B41E 2E 7A E5 21 
              05 00 00 E5 
              21 C8 AE D1 
              E5 CD 24 AA 
              D1 E1 E1 E1     printString(NoMultiplayer2, 5, 122)
   52 D1:B432 CD 03 B5 D1     call GetKeyAnyFast
   53 D1:B436 18 9D -  -      jr SelectedPlay
   54 D1:B438 -  -  -  -  SelectedSinglePlayer:
   55 D1:B438 21 02 AF D1     ld hl, AoCEMapAppvar
   56 D1:B43C CD 20 03 02     call _Mov9ToOP1
   57 D1:B440 CD 0C 05 02     call _ChkFindSym
   58 D1:B444 38 2D -  -      jr c, +_
   59 D1:B446 CD 77 B4 D1     call EraseArea
   60 D1:B44A 2E 6E E5 21 
              32 00 00 E5 
              11 66 94 D0 
              D5 21 88 50 
              00 -  -  -      dispCompressedImage(_newloadgame_compressed, 50, 110)
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\macros.inc"

              CD CD B6 D1 
              CD 38 AA D1 
              D1 E1 E1 Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
   61 D1:B466 CD 8E B4 D1     call SelectMenu
   62 D1:B46A DA D5 B3 D1     jp c, SelectedPlay
   63 D1:B46E 0D -  -  -      dec c
   64 D1:B46F CA E3 AD D1     jp z, LoadMap
   65 D1:B473 C3 AF AC D1 _:  jp GenerateMap
   66 D1:B477 -  -  -  -  
   67 D1:B477 -  -  -  -  EraseArea:
   68 D1:B477 21 82 00 00     ld hl, 130
   69 D1:B47B E5 -  -  -      push hl
   70 D1:B47C 2E D2 -  -          ld l, 210
   71 D1:B47E E5 -  -  -          push hl
   72 D1:B47F 2E 6E -  -              ld l, 110
   73 D1:B481 E5 -  -  -              push hl
   74 D1:B482 2E 00 -  -                  ld l, 0
   75 D1:B484 E5 -  -  -                  push hl
   76 D1:B485 CD 30 AA D1                     call gfx_FillRectangle_NoClip                        ; gfx_FillRectangle_NoClip(0, 110, 210, 130);
   77 D1:B489 E1 -  -  -                  pop hl
   78 D1:B48A E1 -  -  -              pop hl
   79 D1:B48B E1 -  -  -          pop hl
   80 D1:B48C E1 -  -  -      pop hl
   81 D1:B48D C9 -  -  -      ret
   82 D1:B48E -  -  -  -      
   83 D1:B48E -  -  -  -  SelectMenu:
   84 D1:B48E 0E 00 -  -      ld c, 0
   85 D1:B490 -  -  -  -  SelectLoop:
   86 D1:B490 C5 -  -  -      push bc
   87 D1:B491 06 28 -  -          ld b, 40
   88 D1:B493 ED 4C -  -          mlt bc
   89 D1:B495 21 6E 00 00         ld hl, 110
   90 D1:B499 09 -  -  -          add hl, bc
   91 D1:B49A E5 -  -  -          push hl
   92 D1:B49B 21 0A 00 00             ld hl, 10
   93 D1:B49F E5 -  -  -              push hl
   94 D1:B4A0 21 06 84 00                 ld hl, _pointer \.r1
Listing for file "C:\programming\Assembly\AoCE\relocation.inc"
Listing for file "C:\programming\Assembly\AoCE\mainmenu.asm"
   95 D1:B4A4 E5 -  -  -                  push hl
   96 D1:B4A5 CD 38 AA D1                     call gfx_Sprite_NoClip                                ; gfx_Sprite_NoClip(_pointer, 10, 110+40*C);
   97 D1:B4A9 E1 -  -  -                  pop hl
   98 D1:B4AA E1 -  -  -              pop hl
   99 D1:B4AB E1 -  -  -          pop hl
  100 D1:B4AC C1 -  -  -      pop bc
  101 D1:B4AD 41 -  -  -      ld b, c
  102 D1:B4AE -  -  -  -  KeyLoop:
  103 D1:B4AE CD 03 B5 D1     call GetKeyAnyFast
  104 D1:B4B2 2E 1E -  -      ld l, 01Eh
  105 D1:B4B4 CB 46 -  -      bit kpDown, (hl)
  106 D1:B4B6 28 08 -  -      jr z, +_
  107 D1:B4B8 79 -  -  -      ld a, c
  108 D1:B4B9 -  -  -  -  SelectMenuMax = $+1
  109 D1:B4B9 FE 02 -  -      cp a, 2
  110 D1:B4BB 28 03 -  -      jr z, +_
  111 D1:B4BD 0C -  -  -      inc c
  112 D1:B4BE 18 16 -  -      jr EraseCursor
  113 D1:B4C0 CB 5E -  -  _:    bit kpUp, (hl)
  114 D1:B4C2 28 07 -  -      jr z, +_
  115 D1:B4C4 79 -  -  -      ld a, c
  116 D1:B4C5 B7 -  -  -      or a, a
  117 D1:B4C6 28 03 -  -      jr z, +_
  118 D1:B4C8 0D -  -  -      dec c
  119 D1:B4C9 18 0B -  -      jr EraseCursor
  120 D1:B4CB 2E 1C -  -  _:    ld l, 01Ch
  121 D1:B4CD CB 46 -  -      bit kpEnter, (hl)
  122 D1:B4CF C0 -  -  -      ret nz
  123 D1:B4D0 CB 76 -  -  _:    bit kpClear, (hl)
  124 D1:B4D2 28 DA -  -      jr z, KeyLoop
  125 D1:B4D4 37 -  -  -      scf
  126 D1:B4D5 C9 -  -  -      ret
  127 D1:B4D6 -  -  -  -      
  128 D1:B4D6 -  -  -  -  EraseCursor:
  129 D1:B4D6 C5 -  -  -      push bc
  130 D1:B4D7 2E 24 -  -          ld l, 36
  131 D1:B4D9 E5 -  -  -          push hl
  132 D1:B4DA 21 19 00 00             ld hl, 25
  133 D1:B4DE E5 -  -  -              push hl
  134 D1:B4DF 0E 28 -  -                  ld c, 40
  135 D1:B4E1 ED 4C -  -                  mlt bc
  136 D1:B4E3 21 6E 00 00                 ld hl, 110
  137 D1:B4E7 09 -  -  -                  add hl, bc
  138 D1:B4E8 E5 -  -  -                  push hl
  139 D1:B4E9 21 0A 00 00                     ld hl, 10
  140 D1:B4ED E5 -  -  -                      push hl
  141 D1:B4EE CD 30 AA D1                         call gfx_FillRectangle_NoClip                    ; gfx_FillRectangle_NoClip(10, 110+40*B, 25, 36);
  142 D1:B4F2 E1 -  -  -                      pop hl
  143 D1:B4F3 E1 -  -  -                  pop hl
  144 D1:B4F4 E1 -  -  -              pop hl
  145 D1:B4F5 E1 -  -  -          pop hl
  146 D1:B4F6 C1 -  -  -      pop bc
  147 D1:B4F7 18 97 -  -      jr SelectLoop
Listing for file "aoce.asm"
  302 D1:B4F9 -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\AoCE\routines.asm"
    1 D1:B4F9 -  -  -  -  GetKeyFast:
    2 D1:B4F9 21 00 02 F5     ld hl, 0F50200h
    3 D1:B4FD 74 -  -  -      ld (hl), h
    4 D1:B4FE AF -  -  -      xor a, a
    5 D1:B4FF BE -  -  -  _:  cp a, (hl)
    6 D1:B500 20 FD -  -      jr nz, -_
    7 D1:B502 C9 -  -  -      ret
    8 D1:B503 -  -  -  -      
    9 D1:B503 -  -  -  -  GetKeyAnyFast:
   10 D1:B503 CD F9 B4 D1     call GetKeyFast
   11 D1:B507 2E 12 -  -      ld l, 012h
   12 D1:B509 7E -  -  -      ld a, (hl)
   13 D1:B50A 2C -  -  -      inc l
   14 D1:B50B 2C -  -  -      inc l
   15 D1:B50C B6 -  -  -      or a, (hl)
   16 D1:B50D 2C -  -  -      inc l
   17 D1:B50E 2C -  -  -      inc l
   18 D1:B50F B6 -  -  -      or a, (hl)
   19 D1:B510 2C -  -  -      inc l
   20 D1:B511 2C -  -  -      inc l
   21 D1:B512 B6 -  -  -      or a, (hl)
   22 D1:B513 2C -  -  -      inc l
   23 D1:B514 2C -  -  -      inc l
   24 D1:B515 B6 -  -  -      or a, (hl)
   25 D1:B516 2C -  -  -      inc l
   26 D1:B517 2C -  -  -      inc l
   27 D1:B518 B6 -  -  -      or a, (hl)
   28 D1:B519 2C -  -  -      inc l
   29 D1:B51A 2C -  -  -      inc l
   30 D1:B51B B6 -  -  -      or a, (hl)
   31 D1:B51C 28 E5 -  -      jr z, GetKeyAnyFast
   32 D1:B51E 3E 14 -  -      ld a, 20
   33 D1:B520 C3 B8 03 00     jp _DelayTenTimesAms
Listing for file "aoce.asm"
  303 D1:B524 -  -  -  -  #include "drawField.asm"
Listing for file "C:\programming\Assembly\AoCE\drawField.asm"
    1 D1:B524 -  -  -  -  drawfield_loc = $
    2 D1:B524 -  -  -  -  relocate(mpShaData)
Listing for file "C:\programming\Assembly\AoCE\drawField.asm"
    3 E1:0010 -  -  -  -  
    4 E1:0010 -  -  -  -  DrawField:
    5 E1:0010 21 00 2C D5     ld hl, screenBuffer
    6 E1:0014 36 FF -  -      ld (hl), 255
    7 E1:0016 11 01 2C D5     ld de, screenBuffer+1
    8 E1:001A 01 FF 2B 01     ld bc, 320*240-1
    9 E1:001E ED B0 -  -      ldir
   10 E1:0020 FD CB 00 46     bit need_to_redraw_tiles, (iy+0)
   11 E1:0024 C4 00 08 E3     call nz, DrawTiles
   12 E1:0028 11 20 28 D4     ld de, vRAM+(32*320)+32                                     ; Copy the buffer from (32,64) to (32,32)
   13 E1:002C 21 20 7C D5     ld hl, screenBuffer+(64*320)+32
   14 E1:0030 01 00 00 00     ld bc, 0
   15 E1:0034 3E B0 -  -      ld a, 240-32-32
   16 E1:0036 -  -  -  -  CopyBufferLoop:
   17 E1:0036 48 -  -  -      ld c, b
   18 E1:0037 04 -  -  -      inc b                                                       ; Copy 256 bytes
   19 E1:0038 ED B0 -  -      ldir
   20 E1:003A 0E 40 -  -      ld c, 32+32
   21 E1:003C 09 -  -  -      add hl, bc
   22 E1:003D EB -  -  -      ex de, hl
   23 E1:003E 09 -  -  -      add hl, bc
   24 E1:003F EB -  -  -      ex de, hl
   25 E1:0040 3D -  -  -      dec a
   26 E1:0041 20 F3 -  -      jr nz, CopyBufferLoop
   27 E1:0043 C9 -  -  -      ret
   28 E1:0044 -  -  -  -  DrawFieldEnd:
   29 E1:0044 -  -  -  -      
   30 E1:0044 -  -  -  -  endrelocate()
   31 D1:B558 -  -  -  -  drawtiles_loc = $
   32 D1:B558 -  -  -  -  relocate(cursorImage)
   33 E3:0800 -  -  -  -  
   34 E3:0800 -  -  -  -  DrawTiles:
   35 E3:0800 DD 46 00 -      ld b, (ix+OFFSET_X)                                         ; We start with the shadow registers active
   36 E3:0803 CB 60 -  -      bit 4, b
   37 E3:0805 3E 10 -  -      ld a, 16
   38 E3:0807 0E 20 -  -      ld c, 020h
   39 E3:0809 28 04 -  -      jr z, +_
   40 E3:080B 3E F0 -  -      ld a, -16
   41 E3:080D 0E 28 -  -      ld c, 028h
   42 E3:080F 32 62 08 E3 _:  ld (TopRowLeftOrRight), a
   43 E3:0813 79 -  -  -      ld a, c
   44 E3:0814 32 52 09 E3     ld (IncrementRowXOrNot1), a
   45 E3:0818 DD 5E 01 -      ld e, (ix+OFFSET_Y)                                         ; Point to the output
   46 E3:081B 16 A0 -  -      ld d, 160
   47 E3:081D ED 5C -  -      mlt de
   48 E3:081F 21 00 54 D5     ld hl, screenBuffer+(320*32)
   49 E3:0823 19 -  -  -      add hl, de
   50 E3:0824 19 -  -  -      add hl, de
   51 E3:0825 16 00 -  -      ld d, 0
   52 E3:0827 78 -  -  -      ld a, b
   53 E3:0828 C6 10 -  -      add a, 16
   54 E3:082A 5F -  -  -      ld e, a
   55 E3:082B 19 -  -  -      add hl, de
   56 E3:082C 22 5B 08 E3     ld (startingPosition), hl
   57 E3:0830 2A 51 AF D1     ld hl, (TopLeftYTile)                                        ; Y*MAP_SIZE+X, point to the map data
   58 E3:0834 29 -  -  -      add hl, hl
   59 E3:0835 29 -  -  -      add hl, hl
   60 E3:0836 29 -  -  -      add hl, hl
   61 E3:0837 29 -  -  -      add hl, hl
   62 E3:0838 29 -  -  -      add hl, hl
   63 E3:0839 29 -  -  -      add hl, hl
   64 E3:083A 29 -  -  -      add hl, hl
   65 E3:083B ED 5B 4E AF 
              D1 -  -  -      ld de, (TopLeftXTile)
   66 E3:0840 19 -  -  -      add hl, de
   67 E3:0841 29 -  -  -      add hl, hl                                                  ; Each tile is 2 bytes worth
   68 E3:0842 01 F6 31 D0     ld bc, mapAddress
   69 E3:0846 09 -  -  -      add hl, bc
   70 E3:0847 DD 2A 51 AF 
              D1 -  -  -      ld ix, (TopLeftYTile)
   71 E3:084C 3E 1C -  -      ld a, 28
   72 E3:084E ED 73 71 09 
              E3 -  -  -      ld (TempSP2), sp
   73 E3:0853 31 40 01 00     ld sp, lcdWidth
   74 E3:0857 -  -  -  -  DisplayEachRowLoop:
   75 E3:0857 -  -  -  -  ; Registers:
   76 E3:0857 -  -  -  -  ;   A' = row index
   77 E3:0857 -  -  -  -  ;   BC = length of row tile
   78 E3:0857 -  -  -  -  ;   DE = pointer to output
   79 E3:0857 -  -  -  -  ;   HL = pointer to tile/black tile
   80 E3:0857 -  -  -  -  ;   B' = column index
   81 E3:0857 -  -  -  -  ;   DE' = x index tile
   82 E3:0857 -  -  -  -  ;   HL' = pointer to map data
   83 E3:0857 -  -  -  -  ;   IX = y index tile
   84 E3:0857 -  -  -  -  ;   IY = where to draw
   85 E3:0857 -  -  -  -  ;   SP = SCREEN_WIDTH
   86 E3:0857 -  -  -  -  
   87 E3:0857 CB 47 -  -      bit 0, a                                                    ; Here are the shadow registers active
   88 E3:0859 -  -  -  -  startingPosition = $+2
   89 E3:0859 FD 21 00 00 
              00 -  -  -      ld iy, 0
   90 E3:085E 28 03 -  -      jr z, +_
   91 E3:0860 -  -  -  -  TopRowLeftOrRight = $+2
   92 E3:0860 ED 33 00 -      lea iy, iy+0
   93 E3:0863 08 -  -  -  _:  ex af, af'
   94 E3:0864 3E 09 -  -      ld a, 9
   95 E3:0866 -  -  -  -  DisplayTile:
   96 E3:0866 47 -  -  -      ld b, a
   97 E3:0867 7A -  -  -      ld a, d
   98 E3:0868 DD B4 -  -      or a, ixh
   99 E3:086A 20 1B -  -      jr nz, TileIsOutOfField
  100 E3:086C 7B -  -  -      ld a, e                                                     ; Check if one of the both indexes is more than the MAP_SIZE, which is $80
  101 E3:086D DD B5 -  -      or a, ixl
  102 E3:086F 87 -  -  -      add a, a
  103 E3:0870 38 15 -  -      jr c, TileIsOutOfField
  104 E3:0872 -  -  -  -  CheckWhatTypeOfTileItIs:
  105 E3:0872 7E -  -  -      ld a, (hl)
  106 E3:0873 D9 -  -  -      exx                                                         ; Here are the main registers active
  107 E3:0874 B7 -  -  -      or a, a
  108 E3:0875 CA 2B 09 E3     jp z, SkipDrawingOfTile
  109 E3:0879 4F -  -  -      ld c, a
  110 E3:087A 06 03 -  -      ld b, 3
  111 E3:087C ED 4C -  -      mlt bc
  112 E3:087E 21 3B AF D1     ld hl, TilePointers-3
  113 E3:0882 09 -  -  -      add hl, bc
  114 E3:0883 ED 27 -  -      ld hl, (hl)
  115 E3:0885 18 05 -  -      jr +_
  116 E3:0887 -  -  -  -  TileIsOutOfField:
  117 E3:0887 D9 -  -  -      exx
  118 E3:0888 21 00 00 E4     ld hl, blackBuffer
  119 E3:088C ED 13 00 -  _:  lea de, iy
  120 E3:088F 01 02 00 00     ld bc, 2
  121 E3:0893 ED B0 -  -      ldir
  122 E3:0895 FD 39 -  -      add iy, sp
  123 E3:0897 ED 13 FE -      lea de, iy-2
  124 E3:089A 0E 06 -  -      ld c, 6
  125 E3:089C ED B0 -  -      ldir
  126 E3:089E FD 39 -  -      add iy, sp
  127 E3:08A0 ED 13 FC -      lea de, iy-4
  128 E3:08A3 0E 0A -  -      ld c, 10
  129 E3:08A5 ED B0 -  -      ldir
  130 E3:08A7 FD 39 -  -      add iy, sp
  131 E3:08A9 ED 13 FA -      lea de, iy-6
  132 E3:08AC 0E 0E -  -      ld c, 14
  133 E3:08AE ED B0 -  -      ldir
  134 E3:08B0 FD 39 -  -      add iy, sp
  135 E3:08B2 ED 13 F8 -      lea de, iy-8
  136 E3:08B5 0E 12 -  -      ld c, 18
  137 E3:08B7 ED B0 -  -      ldir
  138 E3:08B9 FD 39 -  -      add iy, sp
  139 E3:08BB ED 13 F6 -      lea de, iy-10
  140 E3:08BE 0E 16 -  -      ld c, 22
  141 E3:08C0 ED B0 -  -      ldir
  142 E3:08C2 FD 39 -  -      add iy, sp
  143 E3:08C4 ED 13 F4 -      lea de, iy-12
  144 E3:08C7 0E 1A -  -      ld c, 26
  145 E3:08C9 ED B0 -  -      ldir
  146 E3:08CB FD 39 -  -      add iy, sp
  147 E3:08CD ED 13 F2 -      lea de, iy-14
  148 E3:08D0 0E 1E -  -      ld c, 30
  149 E3:08D2 ED B0 -  -      ldir
  150 E3:08D4 FD 39 -  -      add iy, sp
  151 E3:08D6 ED 13 F1 -      lea de, iy-15
  152 E3:08D9 0E 20 -  -      ld c, 32
  153 E3:08DB ED B0 -  -      ldir
  154 E3:08DD FD 39 -  -      add iy, sp
  155 E3:08DF ED 13 F2 -      lea de, iy-14
  156 E3:08E2 0E 1E -  -      ld c, 30
  157 E3:08E4 ED B0 -  -      ldir
  158 E3:08E6 FD 39 -  -      add iy, sp
  159 E3:08E8 ED 13 F4 -      lea de, iy-12
  160 E3:08EB 0E 1A -  -      ld c, 26
  161 E3:08ED ED B0 -  -      ldir
  162 E3:08EF FD 39 -  -      add iy, sp
  163 E3:08F1 ED 13 F6 -      lea de, iy-10
  164 E3:08F4 0E 16 -  -      ld c, 22
  165 E3:08F6 ED B0 -  -      ldir
  166 E3:08F8 FD 39 -  -      add iy, sp
  167 E3:08FA ED 13 F8 -      lea de, iy-8
  168 E3:08FD 0E 12 -  -      ld c, 18
  169 E3:08FF ED B0 -  -      ldir
  170 E3:0901 FD 39 -  -      add iy, sp
  171 E3:0903 ED 13 FA -      lea de, iy-6
  172 E3:0906 0E 0E -  -      ld c, 14
  173 E3:0908 ED B0 -  -      ldir
  174 E3:090A FD 39 -  -      add iy, sp
  175 E3:090C ED 13 FC -      lea de, iy-4
  176 E3:090F 0E 0A -  -      ld c, 10
  177 E3:0911 ED B0 -  -      ldir
  178 E3:0913 FD 39 -  -      add iy, sp
  179 E3:0915 ED 13 FE -      lea de, iy-2
  180 E3:0918 0E 06 -  -      ld c, 6
  181 E3:091A ED B0 -  -      ldir
  182 E3:091C FD 39 -  -      add iy, sp
  183 E3:091E ED 13 00 -      lea de, iy-0
  184 E3:0921 ED A0 -  -      ldi
  185 E3:0923 ED A0 -  -      ldi
  186 E3:0925 11 20 EC FF     ld de, 32-(320*16)
  187 E3:0929 18 04 -  -      jr +_
  188 E3:092B -  -  -  -  SkipDrawingOfTile:
  189 E3:092B 11 20 00 00     ld de, 32
  190 E3:092F FD 19 -  -  _:  add iy, de
  191 E3:0931 D9 -  -  -      exx
  192 E3:0932 13 -  -  -      inc de
  193 E3:0933 DD 2B -  -      dec ix
  194 E3:0935 78 -  -  -      ld a, b
  195 E3:0936 01 02 FF FF     ld bc, (-MAP_SIZE+1)*2
  196 E3:093A 09 -  -  -      add hl, bc
  197 E3:093B 3D -  -  -      dec a
  198 E3:093C C2 66 08 E3     jp nz, DisplayTile
  199 E3:0940 01 EE 09 00     ld bc, (MAP_SIZE*10-9)*2
  200 E3:0944 09 -  -  -      add hl, bc
  201 E3:0945 EB -  -  -      ex de, hl
  202 E3:0946 01 F7 FF FF     ld bc, -9
  203 E3:094A 09 -  -  -      add hl, bc
  204 E3:094B EB -  -  -      ex de, hl
  205 E3:094C ED 32 0A -      lea ix, ix+9+1
  206 E3:094F 08 -  -  -      ex af, af'
  207 E3:0950 CB 47 -  -      bit 0, a
  208 E3:0952 -  -  -  -  IncrementRowXOrNot1:
  209 E3:0952 20 08 -  -      jr nz, +_
  210 E3:0954 13 -  -  -      inc de
  211 E3:0955 01 02 FF FF     ld bc, (-MAP_SIZE+1)*2
  212 E3:0959 09 -  -  -      add hl, bc
  213 E3:095A DD 2B -  -      dec ix
  214 E3:095C D9 -  -  -  _:  exx
  215 E3:095D 2A 5B 08 E3     ld hl, (startingPosition)
  216 E3:0961 11 00 0A 00     ld de, 8*320
  217 E3:0965 19 -  -  -      add hl, de
  218 E3:0966 22 5B 08 E3     ld (startingPosition), hl
  219 E3:096A D9 -  -  -      exx
  220 E3:096B 3D -  -  -      dec a
  221 E3:096C C2 57 08 E3     jp nz, DisplayEachRowLoop
  222 E3:0970 -  -  -  -  TempSP2 = $+1
  223 E3:0970 31 00 00 00     ld sp, 0
  224 E3:0974 C9 -  -  -      ret
  225 E3:0975 -  -  -  -  DrawTilesEnd:
  226 E3:0975 -  -  -  -  
  227 E3:0975 -  -  -  -  endrelocate()
Listing for file "aoce.asm"
  304 D1:B6CD -  -  -  -  #include "decompress.asm"
Listing for file "C:\programming\Assembly\AoCE\decompress.asm"
    1 D1:B6CD -  -  -  -  DecompressSprite:
    2 D1:B6CD -  -  -  -  ; Routine copied from the C toolchain, maybe by Matt Waltz
    3 D1:B6CD -  -  -  -  ;  Input:
    4 D1:B6CD -  -  -  -  ;   HL = compressed data pointer
    5 D1:B6CD -  -  -  -  ;   DE = output data pointer
    6 D1:B6CD -  -  -  -      
    7 D1:B6CD -  -  -  -  
    8 D1:B6CD 3E 80 -  -      ld a, 128
    9 D1:B6CF -  -  -  -  dzx7t_copy_byte_loop:
   10 D1:B6CF ED A0 -  -      ldi                                                ; copy literal byte
   11 D1:B6D1 -  -  -  -  dzx7t_main_loop:
   12 D1:B6D1 87 -  -  -      add a, a                                        ; check next bit
   13 D1:B6D2 CC 2B B7 D1     call z, dzx7t_load_bits                            ; no more bits left?
   14 D1:B6D6 30 F7 -  -      jr nc, dzx7t_copy_byte_loop                        ; next bit indicates either literal or sequence
   15 D1:B6D8 -  -  -  -  ; determine number of bits used for length (Elias gamma coding)
   16 D1:B6D8 D5 -  -  -      push de
   17 D1:B6D9 11 00 00 00         ld de, 0
   18 D1:B6DD 01 01 00 00         ld bc, 1        
   19 D1:B6E1 -  -  -  -  dzx7t_len_size_loop:
   20 D1:B6E1 14 -  -  -          inc d
   21 D1:B6E2 87 -  -  -          add a, a                                    ; check next bit
   22 D1:B6E3 CC 2B B7 D1         call z, dzx7t_load_bits                        ; no more bits left?
   23 D1:B6E7 30 F8 -  -          jr nc, dzx7t_len_size_loop
   24 D1:B6E9 18 0B -  -          jr dzx7t_len_value_start
   25 D1:B6EB -  -  -  -  ; determine length
   26 D1:B6EB -  -  -  -  dzx7t_len_value_loop:
   27 D1:B6EB 87 -  -  -          add a, a                                    ; check next bit
   28 D1:B6EC CC 2B B7 D1         call z, dzx7t_load_bits                        ; no more bits left?
   29 D1:B6F0 CB 11 -  -          rl c
   30 D1:B6F2 CB 10 -  -          rl b
   31 D1:B6F4 38 32 -  -          jr c, dzx7t_exit                            ; check end marker
   32 D1:B6F6 -  -  -  -  dzx7t_len_value_start:
   33 D1:B6F6 15 -  -  -          dec d
   34 D1:B6F7 20 F2 -  -          jr nz, dzx7t_len_value_loop
   35 D1:B6F9 03 -  -  -          inc bc                                        ; adjust length
   36 D1:B6FA -  -  -  -  ; determine offset
   37 D1:B6FA 5E -  -  -          ld e, (hl)                                    ; load offset flag (1 bit) + offset value (7 bits)
   38 D1:B6FB 23 -  -  -          inc hl
   39 D1:B6FC CB 23 -  -          sla e
   40 D1:B6FE 1C -  -  -          inc e
   41 D1:B6FF 30 1E -  -          jr nc, dzx7t_offset_end                        ; if offset flag is set, load 4 extra bits
   42 D1:B701 87 -  -  -          add a, a                                    ; check next bit
   43 D1:B702 CC 2B B7 D1         call z, dzx7t_load_bits                        ; no more bits left?
   44 D1:B706 CB 12 -  -          rl d                                        ; insert first bit into D
   45 D1:B708 87 -  -  -          add a, a                                    ; check next bit
   46 D1:B709 CC 2B B7 D1         call z, dzx7t_load_bits                        ; no more bits left?
   47 D1:B70D CB 12 -  -          rl d                                        ; insert first bit into D
   48 D1:B70F 87 -  -  -          add a, a                                    ; check next bit
   49 D1:B710 CC 2B B7 D1         call z, dzx7t_load_bits                        ; no more bits left?
   50 D1:B714 CB 12 -  -          rl d                                        ; insert first bit into D
   51 D1:B716 87 -  -  -          add a, a                                    ; check next bit
   52 D1:B717 CC 2B B7 D1         call z, dzx7t_load_bits                        ; no more bits left?
   53 D1:B71B 3F -  -  -          ccf
   54 D1:B71C 38 01 -  -          jr c, dzx7t_offset_end
   55 D1:B71E 14 -  -  -          inc d                                        ; equivalent to adding 128 to DE
   56 D1:B71F -  -  -  -  dzx7t_offset_end:
   57 D1:B71F CB 1B -  -          rr e                                        ; insert inverted fourth bit into E
   58 D1:B721 -  -  -  -  ; copy previous sequence
   59 D1:B721 E3 -  -  -          ex (sp), hl                                    ; store source, restore destination
   60 D1:B722 E5 -  -  -          push hl                                        ; store destination
   61 D1:B723 ED 52 -  -              sbc hl, de                                ; HL = destination - offset - 1
   62 D1:B725 D1 -  -  -          pop de                                        ; DE = destination
   63 D1:B726 ED B0 -  -          ldir
   64 D1:B728 -  -  -  -  dzx7t_exit:
   65 D1:B728 E1 -  -  -      pop hl                                            ; restore source address (compressed data)
   66 D1:B729 30 A6 -  -      jr nc, dzx7t_main_loop
   67 D1:B72B -  -  -  -  dzx7t_load_bits:
   68 D1:B72B 7E -  -  -          ld a, (hl)                                    ; load another group of 8 bits
   69 D1:B72C 23 -  -  -          inc hl
   70 D1:B72D 17 -  -  -          rla
   71 D1:B72E C9 -  -  -          ret
Listing for file "aoce.asm"
  305 D1:B72F -  -  -  -  
  306 D1:B72F -  -  -  -  #include "relocation_table1.asm"
Listing for file "C:\programming\Assembly\AoCE\relocation_table1.asm"
    1 D1:B72F -  -  -  -  RelocationTable1:
    2 D1:B72F DF B2 D1 -  	.dl 13742815
    3 D1:B732 15 B3 D1 -  	.dl 13742869
    4 D1:B735 31 B3 D1 -  	.dl 13742897
    5 D1:B738 69 B3 D1 -  	.dl 13742953
    6 D1:B73B E7 B3 D1 -  	.dl 13743079
    7 D1:B73E 58 B4 D1 -  	.dl 13743192
    8 D1:B741 A1 B4 D1 -  	.dl 13743265
Listing for file "aoce.asm"
  307 D1:B744 FF FF -  -      .dw 0FFFFh
  308 D1:B746 -  -  -  -  #include "relocation_table2.asm"
Listing for file "C:\programming\Assembly\AoCE\relocation_table2.asm"
    1 D1:B746 -  -  -  -  RelocationTable2:
    2 D1:B746 3E AF D1 -  	.dl 13741886
Listing for file "aoce.asm"
  309 D1:B749 FF FF -  -      .dw 0FFFFh
  310 D1:B74B -  -  -  -  
  311 D1:B74B -  -  -  -  .echo "Size of main program:       ",$-start+2+9+4
